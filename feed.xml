<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://h3xitsec.github.io/</id><title>h3xit's ~</title><subtitle>CTF Writeups and other stuff about my journey into cybersecurity</subtitle> <updated>2022-04-03T22:52:03-04:00</updated> <author> <name>h3xit</name> <uri>https://h3xitsec.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://h3xitsec.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://h3xitsec.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 h3xit </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>PicoCTF 2022 - Binary Exploitation</title><link href="https://h3xitsec.github.io/posts/picoctf-binary/" rel="alternate" type="text/html" title="PicoCTF 2022 - Binary Exploitation" /><published>2022-03-30T00:00:00-04:00</published> <updated>2022-04-03T22:51:45-04:00</updated> <id>https://h3xitsec.github.io/posts/picoctf-binary/</id> <content src="https://h3xitsec.github.io/posts/picoctf-binary/" /> <author> <name>h3xit</name> </author> <category term="picoctf" /> <summary> Binary Overflow 0 Challenge Smash the stack Let's start off simple, can you overflow the correct buffer? The program is available here. You can view source here. And connect with it using: nc saturn.picoctf.net 55986 Static code analysis #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;signal.h&amp;gt; #define FLAGSIZE_MAX 64 char flag[FLAGSIZE_MAX]; vo... </summary> </entry> <entry><title>PicoCTF 2022 - Reverse Engineering Challenges</title><link href="https://h3xitsec.github.io/posts/picoctf-reverse/" rel="alternate" type="text/html" title="PicoCTF 2022 - Reverse Engineering Challenges" /><published>2022-03-29T00:00:00-04:00</published> <updated>2022-03-30T00:02:12-04:00</updated> <id>https://h3xitsec.github.io/posts/picoctf-reverse/</id> <content src="https://h3xitsec.github.io/posts/picoctf-reverse/" /> <author> <name>h3xit</name> </author> <category term="picoctf" /> <summary> Bloat.py Challenge Can you get the flag? Run this Python program in the same directory as this encrypted flag. We are given 2 files: bloat.flag.py : a script that asks for a password and gives the flag if it’s ok flag.txt.enc : the encrypted flag bloat.flag.py import sys a = "!\"#$%&amp;amp;'()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~... </summary> </entry> <entry><title>PicoCTF 2022 - Crypto Challenges</title><link href="https://h3xitsec.github.io/posts/picoctf-crypto/" rel="alternate" type="text/html" title="PicoCTF 2022 - Crypto Challenges" /><published>2022-03-29T00:00:00-04:00</published> <updated>2022-03-29T23:58:53-04:00</updated> <id>https://h3xitsec.github.io/posts/picoctf-crypto/</id> <content src="https://h3xitsec.github.io/posts/picoctf-crypto/" /> <author> <name>h3xit</name> </author> <category term="picoctf" /> <summary> Basic Mod 1 Challenge We found this weird message being passed around on the servers, we think we have a working decrpytion scheme. Download the message here. Take each number mod 37 and map it to the following character set: 0-25 is the alphabet (uppercase), 26-35 are the decimal digits, and 36 is an underscore. Wrap your decrypted message in the picoCTF flag format (i.e. picoCTF{decrypted_mes... </summary> </entry> <entry><title>Hack The Box - RouterSpace</title><link href="https://h3xitsec.github.io/posts/htb-routerspace/" rel="alternate" type="text/html" title="Hack The Box - RouterSpace" /><published>2022-03-08T00:00:00-05:00</published> <updated>2022-03-13T22:02:30-04:00</updated> <id>https://h3xitsec.github.io/posts/htb-routerspace/</id> <content src="https://h3xitsec.github.io/posts/htb-routerspace/" /> <author> <name>h3xit</name> </author> <category term="hackthebox" /> <summary> Challenge description https://app.hackthebox.com/machines/RouterSpace This VM is a medium Linux machine Reconnaissance / Enumeration Port scanning and service identification $ rustscan -a $ip -r 1-65535 --ulimit 5000 -- -A -sC [...] PORT STATE SERVICE REASON VERSION 22/tcp open ssh syn-ack (protocol 2.0) | fingerprint-strings: | NULL: |_ SSH-2.0-RouterSpace Packet Filtering ... </summary> </entry> <entry><title>24H@CTF - Jamais Sans Mon Riz</title><link href="https://h3xitsec.github.io/posts/polyctf-jamaissansmonriz/" rel="alternate" type="text/html" title="24H@CTF - Jamais Sans Mon Riz" /><published>2022-02-15T00:00:00-05:00</published> <updated>2022-02-16T09:45:57-05:00</updated> <id>https://h3xitsec.github.io/posts/polyctf-jamaissansmonriz/</id> <content src="https://h3xitsec.github.io/posts/polyctf-jamaissansmonriz/" /> <author> <name>h3xit</name> </author> <category term="polyctf" /> <summary> Challenge Description “Jamais sans mon riz” was the web track designed by Desjardins at the 2022 edition of PolyHx’s 24H@CTF At the time or writing this, the challenge was still available at http://www.jamaissansmonriz.com Flag #1 We are presented with a blog about rice. I started by browsing the site manually. Quickly, something catches my attention: links to blog post are in the form of /... </summary> </entry> </feed>
